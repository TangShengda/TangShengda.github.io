{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1590481707149},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1590481707148},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1590481707149},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1590481707150},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1590481707150},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1590481707151},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1590481707151},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1590481707151},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1590481707151},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1590481707151},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1590481707152},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1590481707152},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1590481707168},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1590481707148},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1590481707150},{"_id":"themes/next/_config.yml","hash":"cc31c820fac48d00c36136474b725be80afa5703","modified":1590481707152},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1590481707149},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1590481707149},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1590481707149},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1590481707152},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1590481707153},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1590481707153},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1590481707153},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1590481707153},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1590481707154},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1590481707154},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1590481707154},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1590481707154},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1590481707154},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1590481707154},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1590481707155},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1590481707167},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1590481707167},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1590481707167},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1590481707167},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1590481707167},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1590481707168},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1590481707169},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1590481707168},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1590481707169},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1590481707243},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1590481707244},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1590481707245},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1590478732193},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1590481707153},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1590481707153},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590481707196},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1590481707155},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1590481707155},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1590481707155},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1590481707156},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1590481707156},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1590481707157},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1590481707157},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1590481707157},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1590481707157},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1590481707158},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1590481707158},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1590481707158},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1590481707160},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1590481707161},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1590481707160},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1590481707165},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1590481707165},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1590481707165},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1590481707165},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1590481707165},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1590481707165},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1590481707170},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1590481707170},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1590481707170},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1590481707170},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1590481707171},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1590481707171},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1590481707171},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1590481707171},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1590481707171},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1590481707195},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1590481707196},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1590481707196},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1590481707197},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1590481707197},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1590481707197},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1590481707197},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1590481707198},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1590481707198},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1590481707198},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1590481707198},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1590481707199},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1590481707199},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1590481707199},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1590481707199},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1590481707155},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1590481707156},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1590481707156},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590481707160},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590481707161},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590481707184},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590481707185},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590481707185},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590481707194},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590481707195},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1590481707157},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1590481707159},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1590481707158},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1590481707159},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1590481707157},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1590481707159},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1590481707159},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1590481707160},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1590481707160},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1590481707161},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1590481707162},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1590481707161},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1590481707162},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1590481707162},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1590481707162},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1590481707162},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1590481707162},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1590481707162},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1590481707163},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1590481707163},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1590481707163},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1590481707163},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1590481707163},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1590481707164},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1590481707164},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1590481707164},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1590481707164},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1590481707164},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1590481707166},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1590481707166},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1590481707166},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1590481707167},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1590481707184},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1590481707184},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1590481707185},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1590481707185},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1590481707194},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1590481707194},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1590481707194},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1590481707195},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1590481707200},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1590481707200},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1590481707200},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1590481707200},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1590481707200},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1590481707201},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1590481707201},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1590481707201},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1590481707202},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1590481707202},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1590481707202},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1590481707207},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1590481707210},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1590481707210},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1590481707210},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1590481707210},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1590481707216},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1590481707216},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1590481707217},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1590481707217},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1590481707218},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1590481707218},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1590481707218},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1590481707218},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1590481707218},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1590481707230},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1590481707159},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1590481707159},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1590481707231},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1590481707231},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1590481707231},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1590481707231},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1590481707232},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1590481707232},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1590481707232},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1590481707232},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1590481707232},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1590481707233},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1590481707233},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1590481707232},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1590481707233},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1590481707233},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1590481707233},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1590481707233},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1590481707233},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1590481707234},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1590481707232},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1590481707235},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1590481707233},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1590481707234},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1590481707234},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1590481707242},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1590481707242},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1590481707239},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1590481707243},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1590481707239},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1590481707230},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1590481707166},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1590481707172},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1590481707172},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1590481707173},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1590481707172},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1590481707176},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1590481707180},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1590481707183},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1590481707183},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1590481707183},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1590481707183},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1590481707184},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1590481707183},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1590481707184},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1590481707186},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1590481707185},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1590481707186},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1590481707186},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1590481707186},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1590481707186},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1590481707187},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1590481707187},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1590481707188},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1590481707188},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1590481707188},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1590481707189},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1590481707188},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1590481707191},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1590481707191},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1590481707191},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1590481707191},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1590481707193},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1590481707193},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1590481707202},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1590481707166},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1590481707172},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1590481707206},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1590481707206},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1590481707211},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1590481707211},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1590481707212},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1590481707212},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1590481707212},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1590481707214},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1590481707216},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1590481707215},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1590481707217},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1590481707217},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1590481707213},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1590481707219},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1590481707219},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1590481707220},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1590481707239},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1590481707239},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1590481707205},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1590481707204},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1590481707229},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1590481707228},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1590481707241},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1590481707174},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1590481707173},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1590481707173},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1590481707173},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1590481707174},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1590481707174},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1590481707175},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1590481707175},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1590481707175},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1590481707175},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1590481707176},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1590481707175},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1590481707176},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1590481707176},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1590481707176},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1590481707176},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1590481707177},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1590481707177},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1590481707177},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1590481707177},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1590481707177},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1590481707177},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1590481707177},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1590481707178},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1590481707178},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1590481707178},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1590481707178},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1590481707178},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1590481707178},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1590481707179},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1590481707179},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1590481707179},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1590481707179},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1590481707179},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1590481707179},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1590481707179},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1590481707180},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1590481707180},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1590481707180},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1590481707180},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1590481707180},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1590481707181},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1590481707181},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1590481707181},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1590481707181},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1590481707181},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1590481707181},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1590481707182},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1590481707182},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1590481707182},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1590481707182},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1590481707182},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1590481707182},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1590481707183},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1590481707183},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1590481707187},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1590481707188},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1590481707190},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1590481707203},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1590481707203},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1590481707174},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1590481707174},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1590481707213},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1590481707213},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1590481707204},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1590481707204},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1590481707214},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1590481707214},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1590481707213},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1590481707213},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1590481707221},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1590481707228},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1590481707223},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1590481707209},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1590481707238},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1590481707226},{"_id":"public/2020/05/26/hello-world/index.html","hash":"6cf6ab17622e2169ed57834c14162900b72f73c3","modified":1590483908469},{"_id":"public/archives/index.html","hash":"255da78a3e10b49ce40fcd83532995dd2c2a2bec","modified":1590483908469},{"_id":"public/archives/2020/index.html","hash":"5ca7bfb141d3ea46c4417bad590ca475087a131c","modified":1590483908469},{"_id":"public/archives/2020/05/index.html","hash":"e939cd2a44b53789cc1992fb65e6146fb06aa15d","modified":1590483908469},{"_id":"public/index.html","hash":"3cba10b185ed990ee7bad2eef6ca2cce8999edf2","modified":1590483908469},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1590483908469},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1590483908469},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1590483908469},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1590483908469},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1590483908469},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1590483908469},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1590483908469},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1590483908469},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1590483908469},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1590483908469},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1590483908469},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1590483908469},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1590483908469},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1590483908469},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1590483908469},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1590483908469},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1590483908469},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1590483908469},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1590483908469},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1590483908469},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1590483908469},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1590483908469},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1590483908469},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1590483908469},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1590483908469},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1590483908469},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1590483908469},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1590483908469},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1590483908469},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1590483908469},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1590483908469},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1590483908469},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1590483908469},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1590483908469},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1590483908469},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1590483908469},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1590483908469},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1590483908469},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1590483908469},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1590483908469},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1590483908469},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1590483908469},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1590483908469},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1590483908469},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1590483908469},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1590483908469},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1590483908469},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1590483908469},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1590483908469},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1590483908469},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1590483908469},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1590483908469},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1590483908469},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1590483908469},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1590483908469},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1590483908469},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1590483908469},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1590483908469},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1590483908469},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1590483908469},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1590483908469},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1590483908469},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1590483908469},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1590483908469},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1590483908469},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1590483908469},{"_id":"public/css/main.css","hash":"5736eea61c1f2f023ce1794a18d50d46b343a6ff","modified":1590483908469},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1590483908469},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1590483908469},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1590483908469},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1590483908469},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1590483908469},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1590483908469},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1590483908469},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1590483908469},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1590483908469},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1590483908469},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1590483908469},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1590483908469},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1590483908469},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1590483908469},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1590483908469},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1590483908469},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1590483908469},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1590483908469},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1590483908469},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1590483908469},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1590483908469},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1590483908469},{"_id":"source/_posts/实现一个深拷贝.md","hash":"c7d5f844ab34e0af867e2c3eef9f7a0e0f72ea3a","modified":1590501395340}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-05-26T07:38:52.193Z","updated":"2020-05-26T07:38:52.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckanp1ydl0000iqbmcmas3hs6","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"实现一个深拷贝","date":"2020-05-26T10:25:59.000Z","_content":"\n# 一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\n\n## 可以通过JSO.stringify和JSON.parse方法\n\n这是JS实现深拷贝最简单的方法了，原理就是先将对象转换为字符串，再通过JSON.parse重新建立一个对象。 但是这种方法会存在属性丢失的问题\n\n- **undefined、symbol 和函数这三种情况，会直接忽略，正则会被转换为空对象**\n  \n  ```tyoescript\n    let obj = {\n      a: '哈哈哈',\n      b: function(){},\n      c: () => {},\n      d: Symbol('foo'),\n      e: new RegExp('ab+c'),\n      f: undefind\n    }\n\n    const newObj = JSON.parse(JSON.stringify(obj))\n\n    console.log(newObj)\n  ```\n\n  运行结果:\n\n  ![运行结果](https://fdfs.xmcdn.com/group79/M07/74/E6/wKgPC17M9dbCDB3EAABNoIa052U513.png)\n\n  可以看到，函数、正则、Symbol，undefind都没有被正确的复制。\n\n- **循环引用情况下，会报错**\n\n  再看如下代码，如果在JSON.stringify中传入一个循环引用的对象，那么会直接报错：\n\n  ```\n  let objA = {\n    name: 'this is a',\n  }\n\n  let objB = {\n    name: 'this is b'\n  }\n\n  objA.child = objB\n  objB.parent = objA\n\n  console.log(JSON.parse(JSON.stringify(objA)))\n  ```\n\n  ![运行结果](https://fdfs.xmcdn.com/group80/M04/6C/FF/wKgPDF7NA7vQXSqPAAEsBhCgVfg210.jpg)\n\n- **相同的引用会被重复复制**\n\n  看如下代码\n  ```\n    let obj = { name: 'TSD' }\n\n    let objA = { age: 18 }\n\n    obj.age = objA\n    obj.age2 = objA\n\n    const newObj = JSON.parse(JSON.stringify(obj))\n\n    obj.age.age = 22\n    newObj.age.age = 30\n\n    console.log('原对象', obj)\n\n    console.log('新对象', newObj.age, newObj.age2)\n  ```\n\n  结果如下:\n\n  ![运行结果](https://fdfs.xmcdn.com/group80/M02/6D/A2/wKgPDF7NBt6AIn1LAAB1dLRGuhg559.jpg)\n\n  我们看到原对象改变age后，age2也得到了改变。但是复制对象没有保持和源对象一样的结构，所以JSON实现深拷贝不能处理指向相同引用的情况，相同的引用会被重复复制。\n\n\n- **new Date 情况下，转换结果不正确**\n\n  ```\n    const date = new Date() \n    // Tue May 26 2020 20:44:32 GMT+0800 (中国标准时间)\n\n    JSON.stringify(date) \n    // \"\"2020-05-26T12:44:32.869Z\"\"\n\n    JSON.parse(JSON.stringify(date)) \n    // \"2020-05-26T12:44:32.869Z\"\n    \n  ```\n\n  解决方法是直接转换成时间戳\n\n  ```\n    const date = new Date().valueOf() // 1590497484613\n\n    JSON.stringify(date) // \"1590497484613\"\n\n    JSON.parse(JSON.stringify(date)) // 1590497484613\n  ```\n\n# 二.使用原生JS去实现一个深拷贝\n\n##  深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\n\n  **第一步 先实现浅拷贝**\n\n  ```  \n  const cloneDeep = (o) => {\n\n    let target = {}\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        console.log(key)\n        target[key] = o[key]\n      }\n    }\n\n    return target\n  }\n  ```\n\n  **第二步 加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝**\n\n  ```\n  const cloneDeep = (o) => {\n\n    let target = {}\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key])\n        } else {\n          target[key] = o[key]\n        }\n      }\n    }\n\n    return target\n  }\n\n  // 判断是否是对象\n  const isObject = (obj) => {\n    return typeof obj === 'object'\n  }\n  ```\n  到这里，一个简单的深拷贝已经完成了，但是依然存在很多问题\n\n  - 没有对传入参数进行校验，传入 null 时应该返回 null 而不是 {}\n  - 对于对象的判断逻辑不严谨，因为 typeof null === 'object'\n  - 没有考虑数组的兼容\n  \n  \n**第三步 拷贝数组**\n  \n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n      if (!isObject(o)) return o\n\n      const target = Array.isArray(o) ? [] : {} // 新增代码\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key])\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n\n  ```\n\n  **第四步 循环应用处理**\n\n  其实解决办法很简单，我们设置一个数组或者哈希表存储已经拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出值返回即可，顺便还解决了引用丢失的问题\n\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n\n      if (!isObject(o)) return o\n      if (hash.has(o)) return hash.get(o) // 新增代码\n\n      const target = Array.isArray(o) ? [] : {}\n\n\n      hash.set(o, target) // 新增代码\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key], hash) // 新增代码\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  使用数组\n  ```\n    const cloneDeep = (o, uniqueList = []) => {\n      if (!isObject(o)) return o\n\n      const target = Array.isArray(o) ? [] : {}\n\n      const uniqueData = find(uniqueList, o)\n      if (uniqueData) {\n        return uniqueData.target\n      }\n      uniqueList.push({\n        source: o,\n        target\n      })\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key],uniqueList)  // 新增代码\n            console.log(target)\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    const find = (arr, source) => {\n      for (const item of arr) {\n        if (item.source === source) return item\n      }\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  **第五步 拷贝Symbol**\n\n  我们可以Symbol类型吗？当然可以。Symbol是ES6才有的类型，我们需要一些方法来检测Symbol类型\n\n  - 方法一：Object.getOwnPropertySymbols(...)\n  - 方法二：Reflect.ownKeys(...)\n\n\n  方法一思路是，先查找一下有没有Symbol属性，如果查找到则先遍历处理 Symbol 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。\n\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n\n    if (!isObject(o)) return o\n    if (hash.has(o)) return hash.get(o)\n\n    const target = Array.isArray(o) ? [] : {}\n\n    hash.set(o, target)\n\n    // 新增代码\n    let symbolKeys = Object.getOwnPropertySymbols(o)\n    if (symbolKeys.length >= 0) {\n      symbolKeys.forEach((symbolKey, index) => {\n        if (isObject(o[symbolKey])) {\n          target[symbolKey] = cloneDeep(o[symbolKey], hash)\n        } else {\n          target[symbolKey] = o[symbolKey]\n        }\n      })\n    }\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key], hash)\n        } else {\n          target[key] = o[key]\n        }\n      }\n    }\n\n    return target\n  }\n\n  // 判断是否是对象\n  const isObject = (obj) => {\n    return typeof obj === 'object' && obj !== null\n  }\n  ```\n\n  方法二: 这里使用了 Reflect.ownKeys() 获取所有的键值，同时包括 Symbol，对 source 遍历赋值即可。\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n      if (!isObject(o)) return o\n      if (hash.has(o)) return hash.get(o)\n\n      const target = Array.isArray(o) ? [] : {}\n\n      hash.set(o, target)\n\n      Reflect.ownKeys(o).forEach((key) => {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key])\n        } else {\n          target[key] = o[key]\n        }\n      })\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  Reflect.ownKeys() 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象自身的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 for..in 就可以了。\n\n  **第五步 破解递归爆栈**\n\n  上面使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。\n\n  ```\n    // RangeError: Maximum call stack size exceeded\n  ```\n\n  其实使用循环就可以了，有的面试官可能会问，实现一个不用递归版本的深克隆\n\n  ```\n      const cloneDeep = (o) => {\n      const root = {}\n\n      // 栈\n      const loopList = [{\n        parent: root,\n        key: undefined,\n        data: o\n      }]\n\n      while (loopList.length) {\n        const node = loopList.pop()\n        const { parent, key, data } = node\n\n        let res = parent\n        if (typeof key !== 'undefined') {\n          parent[key] = {}\n          res = parent[key]\n        }\n\n        for (const k in data) {\n          if (data.hasOwnProperty(k)) {\n            if (isObject(data[k])) {\n              loopList.push({\n                parent: res,\n                key: k,\n                data: data[k]\n              })\n            } else {\n              res[k] = data[k]\n            }\n          }\n        }\n      }\n\n      return root\n\n    }\n  ```\n\n\n\n\n\n\n\n","source":"_posts/实现一个深拷贝.md","raw":"---\ntitle: 实现一个深拷贝\ndate: 2020-05-26 18:25:59\ntags: 算法 深拷贝 JS JS基础 面试题 进阶\n---\n\n# 一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\n\n## 可以通过JSO.stringify和JSON.parse方法\n\n这是JS实现深拷贝最简单的方法了，原理就是先将对象转换为字符串，再通过JSON.parse重新建立一个对象。 但是这种方法会存在属性丢失的问题\n\n- **undefined、symbol 和函数这三种情况，会直接忽略，正则会被转换为空对象**\n  \n  ```tyoescript\n    let obj = {\n      a: '哈哈哈',\n      b: function(){},\n      c: () => {},\n      d: Symbol('foo'),\n      e: new RegExp('ab+c'),\n      f: undefind\n    }\n\n    const newObj = JSON.parse(JSON.stringify(obj))\n\n    console.log(newObj)\n  ```\n\n  运行结果:\n\n  ![运行结果](https://fdfs.xmcdn.com/group79/M07/74/E6/wKgPC17M9dbCDB3EAABNoIa052U513.png)\n\n  可以看到，函数、正则、Symbol，undefind都没有被正确的复制。\n\n- **循环引用情况下，会报错**\n\n  再看如下代码，如果在JSON.stringify中传入一个循环引用的对象，那么会直接报错：\n\n  ```\n  let objA = {\n    name: 'this is a',\n  }\n\n  let objB = {\n    name: 'this is b'\n  }\n\n  objA.child = objB\n  objB.parent = objA\n\n  console.log(JSON.parse(JSON.stringify(objA)))\n  ```\n\n  ![运行结果](https://fdfs.xmcdn.com/group80/M04/6C/FF/wKgPDF7NA7vQXSqPAAEsBhCgVfg210.jpg)\n\n- **相同的引用会被重复复制**\n\n  看如下代码\n  ```\n    let obj = { name: 'TSD' }\n\n    let objA = { age: 18 }\n\n    obj.age = objA\n    obj.age2 = objA\n\n    const newObj = JSON.parse(JSON.stringify(obj))\n\n    obj.age.age = 22\n    newObj.age.age = 30\n\n    console.log('原对象', obj)\n\n    console.log('新对象', newObj.age, newObj.age2)\n  ```\n\n  结果如下:\n\n  ![运行结果](https://fdfs.xmcdn.com/group80/M02/6D/A2/wKgPDF7NBt6AIn1LAAB1dLRGuhg559.jpg)\n\n  我们看到原对象改变age后，age2也得到了改变。但是复制对象没有保持和源对象一样的结构，所以JSON实现深拷贝不能处理指向相同引用的情况，相同的引用会被重复复制。\n\n\n- **new Date 情况下，转换结果不正确**\n\n  ```\n    const date = new Date() \n    // Tue May 26 2020 20:44:32 GMT+0800 (中国标准时间)\n\n    JSON.stringify(date) \n    // \"\"2020-05-26T12:44:32.869Z\"\"\n\n    JSON.parse(JSON.stringify(date)) \n    // \"2020-05-26T12:44:32.869Z\"\n    \n  ```\n\n  解决方法是直接转换成时间戳\n\n  ```\n    const date = new Date().valueOf() // 1590497484613\n\n    JSON.stringify(date) // \"1590497484613\"\n\n    JSON.parse(JSON.stringify(date)) // 1590497484613\n  ```\n\n# 二.使用原生JS去实现一个深拷贝\n\n##  深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\n\n  **第一步 先实现浅拷贝**\n\n  ```  \n  const cloneDeep = (o) => {\n\n    let target = {}\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        console.log(key)\n        target[key] = o[key]\n      }\n    }\n\n    return target\n  }\n  ```\n\n  **第二步 加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝**\n\n  ```\n  const cloneDeep = (o) => {\n\n    let target = {}\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key])\n        } else {\n          target[key] = o[key]\n        }\n      }\n    }\n\n    return target\n  }\n\n  // 判断是否是对象\n  const isObject = (obj) => {\n    return typeof obj === 'object'\n  }\n  ```\n  到这里，一个简单的深拷贝已经完成了，但是依然存在很多问题\n\n  - 没有对传入参数进行校验，传入 null 时应该返回 null 而不是 {}\n  - 对于对象的判断逻辑不严谨，因为 typeof null === 'object'\n  - 没有考虑数组的兼容\n  \n  \n**第三步 拷贝数组**\n  \n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n      if (!isObject(o)) return o\n\n      const target = Array.isArray(o) ? [] : {} // 新增代码\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key])\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n\n  ```\n\n  **第四步 循环应用处理**\n\n  其实解决办法很简单，我们设置一个数组或者哈希表存储已经拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出值返回即可，顺便还解决了引用丢失的问题\n\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n\n      if (!isObject(o)) return o\n      if (hash.has(o)) return hash.get(o) // 新增代码\n\n      const target = Array.isArray(o) ? [] : {}\n\n\n      hash.set(o, target) // 新增代码\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key], hash) // 新增代码\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  使用数组\n  ```\n    const cloneDeep = (o, uniqueList = []) => {\n      if (!isObject(o)) return o\n\n      const target = Array.isArray(o) ? [] : {}\n\n      const uniqueData = find(uniqueList, o)\n      if (uniqueData) {\n        return uniqueData.target\n      }\n      uniqueList.push({\n        source: o,\n        target\n      })\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key],uniqueList)  // 新增代码\n            console.log(target)\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    const find = (arr, source) => {\n      for (const item of arr) {\n        if (item.source === source) return item\n      }\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  **第五步 拷贝Symbol**\n\n  我们可以Symbol类型吗？当然可以。Symbol是ES6才有的类型，我们需要一些方法来检测Symbol类型\n\n  - 方法一：Object.getOwnPropertySymbols(...)\n  - 方法二：Reflect.ownKeys(...)\n\n\n  方法一思路是，先查找一下有没有Symbol属性，如果查找到则先遍历处理 Symbol 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。\n\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n\n    if (!isObject(o)) return o\n    if (hash.has(o)) return hash.get(o)\n\n    const target = Array.isArray(o) ? [] : {}\n\n    hash.set(o, target)\n\n    // 新增代码\n    let symbolKeys = Object.getOwnPropertySymbols(o)\n    if (symbolKeys.length >= 0) {\n      symbolKeys.forEach((symbolKey, index) => {\n        if (isObject(o[symbolKey])) {\n          target[symbolKey] = cloneDeep(o[symbolKey], hash)\n        } else {\n          target[symbolKey] = o[symbolKey]\n        }\n      })\n    }\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key], hash)\n        } else {\n          target[key] = o[key]\n        }\n      }\n    }\n\n    return target\n  }\n\n  // 判断是否是对象\n  const isObject = (obj) => {\n    return typeof obj === 'object' && obj !== null\n  }\n  ```\n\n  方法二: 这里使用了 Reflect.ownKeys() 获取所有的键值，同时包括 Symbol，对 source 遍历赋值即可。\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n      if (!isObject(o)) return o\n      if (hash.has(o)) return hash.get(o)\n\n      const target = Array.isArray(o) ? [] : {}\n\n      hash.set(o, target)\n\n      Reflect.ownKeys(o).forEach((key) => {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key])\n        } else {\n          target[key] = o[key]\n        }\n      })\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  Reflect.ownKeys() 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象自身的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 for..in 就可以了。\n\n  **第五步 破解递归爆栈**\n\n  上面使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。\n\n  ```\n    // RangeError: Maximum call stack size exceeded\n  ```\n\n  其实使用循环就可以了，有的面试官可能会问，实现一个不用递归版本的深克隆\n\n  ```\n      const cloneDeep = (o) => {\n      const root = {}\n\n      // 栈\n      const loopList = [{\n        parent: root,\n        key: undefined,\n        data: o\n      }]\n\n      while (loopList.length) {\n        const node = loopList.pop()\n        const { parent, key, data } = node\n\n        let res = parent\n        if (typeof key !== 'undefined') {\n          parent[key] = {}\n          res = parent[key]\n        }\n\n        for (const k in data) {\n          if (data.hasOwnProperty(k)) {\n            if (isObject(data[k])) {\n              loopList.push({\n                parent: res,\n                key: k,\n                data: data[k]\n              })\n            } else {\n              res[k] = data[k]\n            }\n          }\n        }\n      }\n\n      return root\n\n    }\n  ```\n\n\n\n\n\n\n\n","slug":"实现一个深拷贝","published":1,"updated":"2020-05-27T11:15:01.072Z","_id":"ckanry7ux000082bmaug9d47m","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一-JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\"><a href=\"#一-JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\" class=\"headerlink\" title=\"一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\"></a>一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？</h1><h2 id=\"可以通过JSO-stringify和JSON-parse方法\"><a href=\"#可以通过JSO-stringify和JSON-parse方法\" class=\"headerlink\" title=\"可以通过JSO.stringify和JSON.parse方法\"></a>可以通过JSO.stringify和JSON.parse方法</h2><p>这是JS实现深拷贝最简单的方法了，原理就是先将对象转换为字符串，再通过JSON.parse重新建立一个对象。 但是这种方法会存在属性丢失的问题</p>\n<ul>\n<li><p><strong>undefined、symbol 和函数这三种情况，会直接忽略，正则会被转换为空对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj &#x3D; &#123;</span><br><span class=\"line\">  a: &#39;哈哈哈&#39;,</span><br><span class=\"line\">  b: function()&#123;&#125;,</span><br><span class=\"line\">  c: () &#x3D;&gt; &#123;&#125;,</span><br><span class=\"line\">  d: Symbol(&#39;foo&#39;),</span><br><span class=\"line\">  e: new RegExp(&#39;ab+c&#39;),</span><br><span class=\"line\">  f: undefind</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const newObj &#x3D; JSON.parse(JSON.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(newObj)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<p><img src=\"https://fdfs.xmcdn.com/group79/M07/74/E6/wKgPC17M9dbCDB3EAABNoIa052U513.png\" alt=\"运行结果\"></p>\n<p>可以看到，函数、正则、Symbol，undefind都没有被正确的复制。</p>\n</li>\n<li><p><strong>循环引用情况下，会报错</strong></p>\n<p>再看如下代码，如果在JSON.stringify中传入一个循环引用的对象，那么会直接报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let objA &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;this is a&#39;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let objB &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;this is b&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">objA.child &#x3D; objB</span><br><span class=\"line\">objB.parent &#x3D; objA</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(JSON.parse(JSON.stringify(objA)))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://fdfs.xmcdn.com/group80/M04/6C/FF/wKgPDF7NA7vQXSqPAAEsBhCgVfg210.jpg\" alt=\"运行结果\"></p>\n</li>\n<li><p><strong>相同的引用会被重复复制</strong></p>\n<p>看如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj &#x3D; &#123; name: &#39;TSD&#39; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let objA &#x3D; &#123; age: 18 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.age &#x3D; objA</span><br><span class=\"line\">obj.age2 &#x3D; objA</span><br><span class=\"line\"></span><br><span class=\"line\">const newObj &#x3D; JSON.parse(JSON.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">obj.age.age &#x3D; 22</span><br><span class=\"line\">newObj.age.age &#x3D; 30</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;原对象&#39;, obj)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;新对象&#39;, newObj.age, newObj.age2)</span><br></pre></td></tr></table></figure>\n\n<p>结果如下:</p>\n<p><img src=\"https://fdfs.xmcdn.com/group80/M02/6D/A2/wKgPDF7NBt6AIn1LAAB1dLRGuhg559.jpg\" alt=\"运行结果\"></p>\n<p>我们看到原对象改变age后，age2也得到了改变。但是复制对象没有保持和源对象一样的结构，所以JSON实现深拷贝不能处理指向相同引用的情况，相同的引用会被重复复制。</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>new Date 情况下，转换结果不正确</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const date &#x3D; new Date() </span><br><span class=\"line\">&#x2F;&#x2F; Tue May 26 2020 20:44:32 GMT+0800 (中国标准时间)</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.stringify(date) </span><br><span class=\"line\">&#x2F;&#x2F; &quot;&quot;2020-05-26T12:44:32.869Z&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.parse(JSON.stringify(date)) </span><br><span class=\"line\">&#x2F;&#x2F; &quot;2020-05-26T12:44:32.869Z&quot;</span><br></pre></td></tr></table></figure>\n\n<p>解决方法是直接转换成时间戳</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const date &#x3D; new Date().valueOf() &#x2F;&#x2F; 1590497484613</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.stringify(date) &#x2F;&#x2F; &quot;1590497484613&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.parse(JSON.stringify(date)) &#x2F;&#x2F; 1590497484613</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"二-使用原生JS去实现一个深拷贝\"><a href=\"#二-使用原生JS去实现一个深拷贝\" class=\"headerlink\" title=\"二.使用原生JS去实现一个深拷贝\"></a>二.使用原生JS去实现一个深拷贝</h1><h2 id=\"深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\"><a href=\"#深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\" class=\"headerlink\" title=\"深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\"></a>深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归</h2><p>  <strong>第一步 先实现浅拷贝</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o) &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  let target &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      console.log(key)</span><br><span class=\"line\">      target[key] &#x3D; o[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>第二步 加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o) &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  let target &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] &#x3D; cloneDeep(o[key])</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] &#x3D; o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  到这里，一个简单的深拷贝已经完成了，但是依然存在很多问题</p>\n<ul>\n<li>没有对传入参数进行校验，传入 null 时应该返回 null 而不是 {}</li>\n<li>对于对象的判断逻辑不严谨，因为 typeof null === ‘object’</li>\n<li>没有考虑数组的兼容</li>\n</ul>\n<p><strong>第三步 拷贝数组</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o, hash &#x3D; new WeakMap()) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\"></span><br><span class=\"line\">  const target &#x3D; Array.isArray(o) ? [] : &#123;&#125; &#x2F;&#x2F; 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] &#x3D; cloneDeep(o[key])</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] &#x3D; o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; obj !&#x3D;&#x3D; null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>第四步 循环应用处理</strong></p>\n<p>  其实解决办法很简单，我们设置一个数组或者哈希表存储已经拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出值返回即可，顺便还解决了引用丢失的问题</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o, hash &#x3D; new WeakMap()) &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o) &#x2F;&#x2F; 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  const target &#x3D; Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target) &#x2F;&#x2F; 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] &#x3D; cloneDeep(o[key], hash) &#x2F;&#x2F; 新增代码</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] &#x3D; o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; obj !&#x3D;&#x3D; null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  使用数组<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o, uniqueList &#x3D; []) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\"></span><br><span class=\"line\">  const target &#x3D; Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const uniqueData &#x3D; find(uniqueList, o)</span><br><span class=\"line\">  if (uniqueData) &#123;</span><br><span class=\"line\">    return uniqueData.target</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  uniqueList.push(&#123;</span><br><span class=\"line\">    source: o,</span><br><span class=\"line\">    target</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] &#x3D; cloneDeep(o[key],uniqueList)  &#x2F;&#x2F; 新增代码</span><br><span class=\"line\">        console.log(target)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] &#x3D; o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const find &#x3D; (arr, source) &#x3D;&gt; &#123;</span><br><span class=\"line\">  for (const item of arr) &#123;</span><br><span class=\"line\">    if (item.source &#x3D;&#x3D;&#x3D; source) return item</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; obj !&#x3D;&#x3D; null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  <strong>第五步 拷贝Symbol</strong></p>\n<p>  我们可以Symbol类型吗？当然可以。Symbol是ES6才有的类型，我们需要一些方法来检测Symbol类型</p>\n<ul>\n<li>方法一：Object.getOwnPropertySymbols(…)</li>\n<li>方法二：Reflect.ownKeys(…)</li>\n</ul>\n<p>  方法一思路是，先查找一下有没有Symbol属性，如果查找到则先遍历处理 Symbol 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const cloneDeep &#x3D; (o, hash &#x3D; new WeakMap()) &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o)</span><br><span class=\"line\"></span><br><span class=\"line\">  const target &#x3D; Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 新增代码</span><br><span class=\"line\">  let symbolKeys &#x3D; Object.getOwnPropertySymbols(o)</span><br><span class=\"line\">  if (symbolKeys.length &gt;&#x3D; 0) &#123;</span><br><span class=\"line\">    symbolKeys.forEach((symbolKey, index) &#x3D;&gt; &#123;</span><br><span class=\"line\">      if (isObject(o[symbolKey])) &#123;</span><br><span class=\"line\">        target[symbolKey] &#x3D; cloneDeep(o[symbolKey], hash)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[symbolKey] &#x3D; o[symbolKey]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] &#x3D; cloneDeep(o[key], hash)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] &#x3D; o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; obj !&#x3D;&#x3D; null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  方法二: 这里使用了 Reflect.ownKeys() 获取所有的键值，同时包括 Symbol，对 source 遍历赋值即可。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o, hash &#x3D; new WeakMap()) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o)</span><br><span class=\"line\"></span><br><span class=\"line\">  const target &#x3D; Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target)</span><br><span class=\"line\"></span><br><span class=\"line\">  Reflect.ownKeys(o).forEach((key) &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (isObject(o[key])) &#123;</span><br><span class=\"line\">      target[key] &#x3D; cloneDeep(o[key])</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      target[key] &#x3D; o[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; obj !&#x3D;&#x3D; null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  Reflect.ownKeys() 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象自身的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 for..in 就可以了。</p>\n<p>  <strong>第五步 破解递归爆栈</strong></p>\n<p>  上面使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; RangeError: Maximum call stack size exceeded</span><br></pre></td></tr></table></figure>\n\n<p>  其实使用循环就可以了，有的面试官可能会问，实现一个不用递归版本的深克隆</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const cloneDeep &#x3D; (o) &#x3D;&gt; &#123;</span><br><span class=\"line\">  const root &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 栈</span><br><span class=\"line\">  const loopList &#x3D; [&#123;</span><br><span class=\"line\">    parent: root,</span><br><span class=\"line\">    key: undefined,</span><br><span class=\"line\">    data: o</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">  while (loopList.length) &#123;</span><br><span class=\"line\">    const node &#x3D; loopList.pop()</span><br><span class=\"line\">    const &#123; parent, key, data &#125; &#x3D; node</span><br><span class=\"line\"></span><br><span class=\"line\">    let res &#x3D; parent</span><br><span class=\"line\">    if (typeof key !&#x3D;&#x3D; &#39;undefined&#39;) &#123;</span><br><span class=\"line\">      parent[key] &#x3D; &#123;&#125;</span><br><span class=\"line\">      res &#x3D; parent[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const k in data) &#123;</span><br><span class=\"line\">      if (data.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">        if (isObject(data[k])) &#123;</span><br><span class=\"line\">          loopList.push(&#123;</span><br><span class=\"line\">            parent: res,</span><br><span class=\"line\">            key: k,</span><br><span class=\"line\">            data: data[k]</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          res[k] &#x3D; data[k]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return root</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\"><a href=\"#一-JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\" class=\"headerlink\" title=\"一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\"></a>一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？</h1><h2 id=\"可以通过JSO-stringify和JSON-parse方法\"><a href=\"#可以通过JSO-stringify和JSON-parse方法\" class=\"headerlink\" title=\"可以通过JSO.stringify和JSON.parse方法\"></a>可以通过JSO.stringify和JSON.parse方法</h2><p>这是JS实现深拷贝最简单的方法了，原理就是先将对象转换为字符串，再通过JSON.parse重新建立一个对象。 但是这种方法会存在属性丢失的问题</p>\n<ul>\n<li><p><strong>undefined、symbol 和函数这三种情况，会直接忽略，正则会被转换为空对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj &#x3D; &#123;</span><br><span class=\"line\">  a: &#39;哈哈哈&#39;,</span><br><span class=\"line\">  b: function()&#123;&#125;,</span><br><span class=\"line\">  c: () &#x3D;&gt; &#123;&#125;,</span><br><span class=\"line\">  d: Symbol(&#39;foo&#39;),</span><br><span class=\"line\">  e: new RegExp(&#39;ab+c&#39;),</span><br><span class=\"line\">  f: undefind</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const newObj &#x3D; JSON.parse(JSON.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(newObj)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<p><img src=\"https://fdfs.xmcdn.com/group79/M07/74/E6/wKgPC17M9dbCDB3EAABNoIa052U513.png\" alt=\"运行结果\"></p>\n<p>可以看到，函数、正则、Symbol，undefind都没有被正确的复制。</p>\n</li>\n<li><p><strong>循环引用情况下，会报错</strong></p>\n<p>再看如下代码，如果在JSON.stringify中传入一个循环引用的对象，那么会直接报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let objA &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;this is a&#39;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let objB &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;this is b&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">objA.child &#x3D; objB</span><br><span class=\"line\">objB.parent &#x3D; objA</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(JSON.parse(JSON.stringify(objA)))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://fdfs.xmcdn.com/group80/M04/6C/FF/wKgPDF7NA7vQXSqPAAEsBhCgVfg210.jpg\" alt=\"运行结果\"></p>\n</li>\n<li><p><strong>相同的引用会被重复复制</strong></p>\n<p>看如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj &#x3D; &#123; name: &#39;TSD&#39; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let objA &#x3D; &#123; age: 18 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.age &#x3D; objA</span><br><span class=\"line\">obj.age2 &#x3D; objA</span><br><span class=\"line\"></span><br><span class=\"line\">const newObj &#x3D; JSON.parse(JSON.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">obj.age.age &#x3D; 22</span><br><span class=\"line\">newObj.age.age &#x3D; 30</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;原对象&#39;, obj)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;新对象&#39;, newObj.age, newObj.age2)</span><br></pre></td></tr></table></figure>\n\n<p>结果如下:</p>\n<p><img src=\"https://fdfs.xmcdn.com/group80/M02/6D/A2/wKgPDF7NBt6AIn1LAAB1dLRGuhg559.jpg\" alt=\"运行结果\"></p>\n<p>我们看到原对象改变age后，age2也得到了改变。但是复制对象没有保持和源对象一样的结构，所以JSON实现深拷贝不能处理指向相同引用的情况，相同的引用会被重复复制。</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>new Date 情况下，转换结果不正确</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const date &#x3D; new Date() </span><br><span class=\"line\">&#x2F;&#x2F; Tue May 26 2020 20:44:32 GMT+0800 (中国标准时间)</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.stringify(date) </span><br><span class=\"line\">&#x2F;&#x2F; &quot;&quot;2020-05-26T12:44:32.869Z&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.parse(JSON.stringify(date)) </span><br><span class=\"line\">&#x2F;&#x2F; &quot;2020-05-26T12:44:32.869Z&quot;</span><br></pre></td></tr></table></figure>\n\n<p>解决方法是直接转换成时间戳</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const date &#x3D; new Date().valueOf() &#x2F;&#x2F; 1590497484613</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.stringify(date) &#x2F;&#x2F; &quot;1590497484613&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.parse(JSON.stringify(date)) &#x2F;&#x2F; 1590497484613</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"二-使用原生JS去实现一个深拷贝\"><a href=\"#二-使用原生JS去实现一个深拷贝\" class=\"headerlink\" title=\"二.使用原生JS去实现一个深拷贝\"></a>二.使用原生JS去实现一个深拷贝</h1><h2 id=\"深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\"><a href=\"#深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\" class=\"headerlink\" title=\"深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\"></a>深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归</h2><p>  <strong>第一步 先实现浅拷贝</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o) &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  let target &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      console.log(key)</span><br><span class=\"line\">      target[key] &#x3D; o[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>第二步 加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o) &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  let target &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] &#x3D; cloneDeep(o[key])</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] &#x3D; o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  到这里，一个简单的深拷贝已经完成了，但是依然存在很多问题</p>\n<ul>\n<li>没有对传入参数进行校验，传入 null 时应该返回 null 而不是 {}</li>\n<li>对于对象的判断逻辑不严谨，因为 typeof null === ‘object’</li>\n<li>没有考虑数组的兼容</li>\n</ul>\n<p><strong>第三步 拷贝数组</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o, hash &#x3D; new WeakMap()) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\"></span><br><span class=\"line\">  const target &#x3D; Array.isArray(o) ? [] : &#123;&#125; &#x2F;&#x2F; 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] &#x3D; cloneDeep(o[key])</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] &#x3D; o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; obj !&#x3D;&#x3D; null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>第四步 循环应用处理</strong></p>\n<p>  其实解决办法很简单，我们设置一个数组或者哈希表存储已经拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出值返回即可，顺便还解决了引用丢失的问题</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o, hash &#x3D; new WeakMap()) &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o) &#x2F;&#x2F; 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  const target &#x3D; Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target) &#x2F;&#x2F; 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] &#x3D; cloneDeep(o[key], hash) &#x2F;&#x2F; 新增代码</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] &#x3D; o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; obj !&#x3D;&#x3D; null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  使用数组<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o, uniqueList &#x3D; []) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\"></span><br><span class=\"line\">  const target &#x3D; Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const uniqueData &#x3D; find(uniqueList, o)</span><br><span class=\"line\">  if (uniqueData) &#123;</span><br><span class=\"line\">    return uniqueData.target</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  uniqueList.push(&#123;</span><br><span class=\"line\">    source: o,</span><br><span class=\"line\">    target</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] &#x3D; cloneDeep(o[key],uniqueList)  &#x2F;&#x2F; 新增代码</span><br><span class=\"line\">        console.log(target)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] &#x3D; o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const find &#x3D; (arr, source) &#x3D;&gt; &#123;</span><br><span class=\"line\">  for (const item of arr) &#123;</span><br><span class=\"line\">    if (item.source &#x3D;&#x3D;&#x3D; source) return item</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; obj !&#x3D;&#x3D; null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  <strong>第五步 拷贝Symbol</strong></p>\n<p>  我们可以Symbol类型吗？当然可以。Symbol是ES6才有的类型，我们需要一些方法来检测Symbol类型</p>\n<ul>\n<li>方法一：Object.getOwnPropertySymbols(…)</li>\n<li>方法二：Reflect.ownKeys(…)</li>\n</ul>\n<p>  方法一思路是，先查找一下有没有Symbol属性，如果查找到则先遍历处理 Symbol 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const cloneDeep &#x3D; (o, hash &#x3D; new WeakMap()) &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o)</span><br><span class=\"line\"></span><br><span class=\"line\">  const target &#x3D; Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 新增代码</span><br><span class=\"line\">  let symbolKeys &#x3D; Object.getOwnPropertySymbols(o)</span><br><span class=\"line\">  if (symbolKeys.length &gt;&#x3D; 0) &#123;</span><br><span class=\"line\">    symbolKeys.forEach((symbolKey, index) &#x3D;&gt; &#123;</span><br><span class=\"line\">      if (isObject(o[symbolKey])) &#123;</span><br><span class=\"line\">        target[symbolKey] &#x3D; cloneDeep(o[symbolKey], hash)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[symbolKey] &#x3D; o[symbolKey]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] &#x3D; cloneDeep(o[key], hash)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] &#x3D; o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; obj !&#x3D;&#x3D; null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  方法二: 这里使用了 Reflect.ownKeys() 获取所有的键值，同时包括 Symbol，对 source 遍历赋值即可。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep &#x3D; (o, hash &#x3D; new WeakMap()) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o)</span><br><span class=\"line\"></span><br><span class=\"line\">  const target &#x3D; Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target)</span><br><span class=\"line\"></span><br><span class=\"line\">  Reflect.ownKeys(o).forEach((key) &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (isObject(o[key])) &#123;</span><br><span class=\"line\">      target[key] &#x3D; cloneDeep(o[key])</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      target[key] &#x3D; o[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 判断是否是对象</span><br><span class=\"line\">const isObject &#x3D; (obj) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; obj !&#x3D;&#x3D; null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  Reflect.ownKeys() 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象自身的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 for..in 就可以了。</p>\n<p>  <strong>第五步 破解递归爆栈</strong></p>\n<p>  上面使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; RangeError: Maximum call stack size exceeded</span><br></pre></td></tr></table></figure>\n\n<p>  其实使用循环就可以了，有的面试官可能会问，实现一个不用递归版本的深克隆</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const cloneDeep &#x3D; (o) &#x3D;&gt; &#123;</span><br><span class=\"line\">  const root &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 栈</span><br><span class=\"line\">  const loopList &#x3D; [&#123;</span><br><span class=\"line\">    parent: root,</span><br><span class=\"line\">    key: undefined,</span><br><span class=\"line\">    data: o</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">  while (loopList.length) &#123;</span><br><span class=\"line\">    const node &#x3D; loopList.pop()</span><br><span class=\"line\">    const &#123; parent, key, data &#125; &#x3D; node</span><br><span class=\"line\"></span><br><span class=\"line\">    let res &#x3D; parent</span><br><span class=\"line\">    if (typeof key !&#x3D;&#x3D; &#39;undefined&#39;) &#123;</span><br><span class=\"line\">      parent[key] &#x3D; &#123;&#125;</span><br><span class=\"line\">      res &#x3D; parent[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const k in data) &#123;</span><br><span class=\"line\">      if (data.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">        if (isObject(data[k])) &#123;</span><br><span class=\"line\">          loopList.push(&#123;</span><br><span class=\"line\">            parent: res,</span><br><span class=\"line\">            key: k,</span><br><span class=\"line\">            data: data[k]</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          res[k] &#x3D; data[k]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return root</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckanry7ux000082bmaug9d47m","tag_id":"ckap2l1qq0004tlbm59nh1u6h","_id":"ckap2l1qq0005tlbm5unx02xf"}],"Tag":[{"name":"算法 深拷贝 JS JS基础面试题","_id":"ckap2kw0z0000tlbma0nygb3d"},{"name":"算法 深拷贝 JS JS基础 面试题","_id":"ckap2kwws0002tlbm4cj3dipc"},{"name":"算法 深拷贝 JS JS基础 面试题 进阶","_id":"ckap2l1qq0004tlbm59nh1u6h"}]}}