{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/WebP在喜马拉雅的使用.md","hash":"9bb0bfc7e334c98222e479591b3ff7dca72d99d7","modified":1636909396920},{"_id":"source/_posts/在浏览器输入URL，按下回车之后发生了什么？.md","hash":"23a336581b8c90f89f7af3282be8e0ef74e96855","modified":1636909394776},{"_id":"source/_posts/如何收集前端性能数据.md","hash":"a44947f9f341cb3385427ff179fd6e8efb29a62d","modified":1636909392592},{"_id":"source/_posts/实现一个深拷贝.md","hash":"dd6c426cc8a1e84a98d58785151deeab7760f3e8","modified":1636909393721},{"_id":"source/_posts/js实现一个发布订阅.md","hash":"ffd42f8ae9f863799934a0a6d06b21295cfe17d1","modified":1636909395833},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636909646797},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636909646797},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636909646797},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636909646797},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636909646798},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636909646795},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636909646796},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636909646796},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636909646796},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636909646796},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1636909646814},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1636909646800},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"2dd0997639a8cf8a83c69115de30afa858e3da96","modified":1636909646814},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"653d306a010f669192883483414da500d48cf592","modified":1636909646808},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1636909646945},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1636909646945},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1636909646945},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":1636909646945},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1636909646945},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1636909646945},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1636909646945},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1636909646946},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1636909646946},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1636909646946},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1636909646946},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1636909646946},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1636909646946},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":1636909646810},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"74e438bb42619666050192d6f3dc39023777eee2","modified":1636909646946},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1636909646811},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1636909646811},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1636909646813},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"a5829907b219e95266f7ed5ee6203e60e2273f93","modified":1636909646813},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1636909646813},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1636909646814},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1636909646813},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1636909646814},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1636909646802},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":1636909646803},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"a974b56a1fbb254f1ae048cc2221363faaccec25","modified":1636909646805},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1636909646804},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"16513ab1745533d0f4cdbdee323339ebab6d02c1","modified":1636909646811},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1636909646812},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1636909646812},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":1636909646812},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"5625c4040a885aaf150f35fe9d07d844d7f94a27","modified":1636909646812},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":1636909646813},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1636909646813},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1636909646946},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":1636909646814},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1636909646814},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"689cf4a6b79337b11d1d56afa9dda09223a809a1","modified":1636909646814},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1636909646811},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1636909646810},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1636909646813},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":1636909646803},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1636909646807},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1636909646805},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":1636909646808},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1636909646877},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1636909646877},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1636909646877},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1636909646881},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":1636909646878},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1636909646814},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1636909646881},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1636909646881},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1636909646881},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"679b61b5fc5b3281735a21c37aeb64229d9c51ea","modified":1636909646882},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1636909646877},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1636909646882},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1636909646883},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1636909646803},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1636909646883},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":1636909646881},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1636909646880},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1636909646880},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1636909646883},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1636909646871},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1636909646883},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1636909646945},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1636909646883},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1636909646877},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1636909646802},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1636909646944},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1636909646801},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1636909646805},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1636909646802},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1636909646945},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1636909646808},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"8d78149f44629d0848921c6fb9c008b03cef3116","modified":1636909646808},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"7d744391a8abee9a2c450b6fdd36a3866a488025","modified":1636909646808},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1636909646808},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1636909646808},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1636909646808},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1636909646809},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1636909646809},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1636909646809},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1636909646809},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1636909646808},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1636909646809},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1636909646809},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1636909646808},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1636909646807},{"_id":"source/面试题/index.md","hash":"b2099cb20fc2accc3196afb69f59cd19254bb1c2","modified":1636911125323},{"_id":"source/面试题/JS基础.md","hash":"0c642e7c0004ae684b893ce1c836f9f229a602ed","modified":1636911301697},{"_id":"source/categories/index.md","hash":"9a27478cb90bcf1a4f1f69f84f33afedf3121fbb","modified":1636912659133},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"cedd13fcd8c75a68742265dd8eced4087e940ffd","modified":1636912219451},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1636912219151},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"459d6f3200863021bee1fe72a719aef236fb4090","modified":1636912219451},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"63d1a594969b7b5b97e1babebc7b85ef07c02e4f","modified":1636912219599},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"648133dc95e1990682930b02e6b6074def034db7","modified":1636912219449},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":1636912219460},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1636912219468},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1636912219456},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1636912219531},{"_id":"node_modules/hexo-theme-butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1636912219602},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":1636912219601},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1636912219527},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1636912219525},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1636912219603},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":1636912219601},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":1636912219603},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"7d378e328a53cc99d5acc9682dce53f5eb61537d","modified":1636912219452},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1636912219450},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1636912219601},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1636912219464},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"1377952022ee0a9eaa7a2fd1098f1571efc468d9","modified":1636912219465},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1636912219450},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":1636912219453},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1636912219468},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1636912219525},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":1636912219377},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"8dafc2dcd8c33f70a546fee443f0b6d80b3cd243","modified":1636912219530},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1636912219376},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":1636912219529},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1636912219450},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"65f2442e04c4defd16e7c1e67701d3bb41d9577a","modified":1636912219377},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1636912219380},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1636912219449},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1636912219381},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1636912219375},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1636912219374},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":1636912219376},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1636912219377},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1636912219376},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1636912219378},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1636912219377},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1636912219380},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":1636912219379},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1636912219373},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1636912219381},{"_id":"node_modules/hexo-theme-butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1636912219597},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1636912219452},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"40c3f64422205a24e68ce1ad8fe8163f24fdd525","modified":1636912219596},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1636912219448},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"b244f28124a46d7f1e8ef76ba6e925289691f93b","modified":1636912219379},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":1636912219380},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1636912219543},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1636912219448},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1636912219299},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1636912219525},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":1636912219455},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1636912219380},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1636912219524},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1636912219465},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":1636912219527},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":1636912219460},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1636912219530},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":1636912219460},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1636912219527},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1636912219465},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":1636912219526},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1636912219456},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":1636912219523},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":1636912219524},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":1636912219527},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1636912219460},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":1636912219461},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1636912219531},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"b53a2d4f9c37b375a4446d2273dcfb7712d91b3e","modified":1636912219463},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1636912219530},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1636912219529},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1636912219526},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1636912219468},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1636912219522},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1636912219463},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"933cb710d2dbcea25c6426a57c6f49d2f48b792c","modified":1636912219525},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1636912219527},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1636912219525},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":1636912219531},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1636912219457},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1636912219455},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1636912219457},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"0366c658cdcff839aa1df2e2d252a03a53fd427e","modified":1636912219457},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1636912219457},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":1636912219459},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1636912219458},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1636912219458},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1636912219458},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1636912219459},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1636912219459},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"b5525891f6affd02c1ea3b2327c026882efe428b","modified":1636912219467},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":1636912219537},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1636912219459},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":1636912219545},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"7feb755ca7c22da36bbad11e74ecd95fdcf3b879","modified":1636912219535},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1636912219459},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1636912219536},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":1636912219536},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":1636912219545},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":1636912219546},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":1636912219545},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1636912219543},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"dd8cdf639ba2b726437c77fa7aa8d5edbabe8f9b","modified":1636912219540},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"98235fcda3b87ad6f7e91eafbed94d0d6ae847ca","modified":1636912219540},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":1636912219546},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"917e0e399e117217184ca63d3eb5c4843bcccf7b","modified":1636912219534},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":1636912219546},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"f168f5c669978f633abe118cdcc4a12cfc883c01","modified":1636912219542},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"978c397d0966eaf9e6e2afd13866f8f4900b509f","modified":1636912219596},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"6befe4c51b86d0c1de130beeecad9e28d6442713","modified":1636912219544},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"2c5fb77c448ce0a734040c8ce532b28fed688899","modified":1636912219546},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1636912219535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1636912219536},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"97fec1e814f88237862f4d800a35362b802f6625","modified":1636912219536},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":1636912219542},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1636912219546},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"b0488ceacde74af139d66c8db5cb36cc21737b9b","modified":1636912219534},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"e211efbd1952d4b1b881287aa43423133c1d166e","modified":1636912219542},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":1636912219540},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"2cc49d3f6a6beb9f7bff93e292f88aa5681da1d0","modified":1636912219540},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1636912219541},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":1636912219540},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1636912219543},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1636912219543},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1636912219545},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":1636912219536},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":1636912219541},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1636912219546},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"fa4b87e7b29bdd1f09eb1a30e06ba74b224f0ba2","modified":1636912219595},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"b1429e9f80ef6b9a77434819ffb87d90bdad25e8","modified":1636912219378},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1636912219151},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1636912219460},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1636912219461},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"85e72c70a0cef29e40be1968f5d23b06c6f8e3aa","modified":1636912219541},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1636912219461},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1636912219465},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1636912219374},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1636912219466},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c46a932257212f82e4a9974fbbc5de8878c8b383","modified":1636912219463},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1636912219462},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1636912219531},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1636912219466},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":1636912219464},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1636912219468},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1636912219468},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":1636912219532},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"36f3c603d2a2ecddaa6d2675a89d76ad94968f72","modified":1636912219533},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":1636912219463},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1636912219532},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":1636912219533},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1636912219468},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1636912219523},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":1636912219524},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":1636912219465},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":1636912219461},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1636912219467},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1636912219533},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1636912219531},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1636912219467},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":1636912219523},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1636912219467},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":1636912219454},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":1636912219533},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1636912219462},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1636912219463},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1636912219532},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1636912219532},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1636912219466},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1636912219453},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1636912219453},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1636912219467},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1636912219533},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":1636912219542},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1636912219537},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":1636912219542},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1636912219529},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1636912219538},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1636912219543},{"_id":"source/_data/link.yml","hash":"12ceb63a04ba1c92e284f65936881d77c97baa97","modified":1636912754174},{"_id":"source/tags/index.md","hash":"2593f410d81c0f659cfc37a1e5f0d4b88115b135","modified":1636912619615},{"_id":"source/link/index.md","hash":"23fe8f36acd671f34bd2acaf9fd989d7c10d3570","modified":1636912691382},{"_id":"source/_posts/JS基础面试提-持续更新.md","hash":"027630b5da9d349322d40e8de0325be10e5c0a6c","modified":1636957843649},{"_id":"source/_posts/JS基础面试题-持续更新.md","hash":"ef6d2c4b6667352be1089ae7822be6019bd4956b","modified":1636958049104}],"Category":[{"name":"面试题","_id":"ckw0afuee0001zk9k238a8ar3"}],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"categories","date":"2021-11-14T17:57:21.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-11-15 01:57:21\ntype: \"categories\"\n---\n","updated":"2021-11-14T17:57:39.133Z","path":"categories/index.html","_id":"ckvzj23ea00005ibm7z6chvu0","comments":1,"layout":"page","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"link","date":"2021-11-14T17:57:58.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2021-11-15 01:57:58\ntype: \"link\"\n---\n","updated":"2021-11-14T17:58:11.382Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckvzjp1p8000044bmgtg2gav9","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"tags","date":"2021-11-14T17:56:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-15 01:56:33\ntype: \"tags\"\n---\n","updated":"2021-11-14T17:56:59.615Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckvzjp1pj000144bmfgwzaoo9","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""}],"Post":[{"title":"WebP在喜马拉雅的使用","date":"2020-09-04T02:45:13.000Z","_content":"\n## 背景\n\n不管是 PC 还是移动端，图片一直是流量大头，以苹果公司 Retina 产品为代表的高 PPI 屏对图片的质量提出了更高的要求，如何保证在图片的精细度不降低的前提下缩小图片体积，成为了一个有价值且值得探索的事情。\n\n但如今对于 JPEG、PNG 和 GIF 这些图片格式的优化几乎已经达到了极致， 若想改变现状开辟新局面，便要有釜底抽薪的胆量和气魄，而 Google 给了我们一个新选择：WebP。\n\n\n## 了解WebP\n\n### 什么是WebP\n\nWebP，是一种支持有损压缩和无损压缩的图片文件格式，派生自图像编码格式 VP8。根据 Google 的测试，无损压缩后的 WebP 比 PNG 文件少了 45％ 的文件大小，即使这些 PNG 文件经过其他压缩工具压缩之后，WebP 还是可以减少 28％ 的文件大小。\n\n### WebP的优点\n\nWebP 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。\n\n![WebP](http://image.uisdc.com/wp-content/uploads/2014/12/20141212164211465-590x201.png)\n\n### WebP的缺点\n\n![测试数据](http://image.uisdc.com/wp-content/uploads/2014/12/20141215144323396.jpg)\n\n* <font color=red>解码耗时：WebP 的解码时间是 PNG 格式的 4.4 倍（24.8ms）</font>\n* 流畅程度：两种格式下，AIO 滑动流畅度无明显差异\n* CPU使用：两种格式下，连续发送 15 个图片，CPU 使用均在 10%—26% 之间波动，两者无明显差异\n* 内存占用：两者格式下，连续发送 15 个图片，内存占用跨度均为 11M，无明显差异\n\n### WebP的浏览器兼容性\n\n![浏览器兼容性](https://fdfs.xmcdn.com/group83/M05/DA/96/wKg5HV9RsCfC5zBDAAR68WSLiPY683.png)\n\n### WebP的IOS客户端兼容情况\n![喜马拉雅IOS客户端支持情况](https://fdfs.xmcdn.com/group86/M03/DB/30/wKg5Jl9RsJLBGTlXAAwm8yCMfQ0620.png)\nIOS大部分还是不支持的\n\n### WebP的Android客户端兼容情况\n![喜马拉雅Android客户端支持情况](https://fdfs.xmcdn.com/group83/M01/DB/A3/wKg5I19Rv7aC0EjcAAZNDJm-DAQ644.png)\nAndroid4.3以上全部支持\n\n### 谁在使用WebP\n\n2010 年发布的 WebP 已经不算是新鲜事物了，在 Google 的明星产品如 Youtube、Gmail、Google Play 中都可以看到 WebP 的身影，而 Chrome 网上商店甚至已完全使用了 WebP。国外公司如 Facebook、ebay 和国内公司如腾讯、淘宝、美团等也早已尝鲜。\n\n![谁在使用WebP](https://fdfs.xmcdn.com/group87/M00/D9/B3/wKg5J19RwCCBqMFvAA_vZ6WNp_E130.png)\n\nYouTube 的视频略缩图采用 WebP 格式后，网页加载速度提升了 10%；谷歌的 Chrome 网上应用商店采用 WebP 格式图片后，每天可以节省几 TB 的带宽，页面平均加载时间大约减少 1/3；Google+ 移动应用采用 WebP 图片格式后，每天节省了 50TB 数据存储空间。\n\n### 喜马拉雅哪些项目在使用WebP\n\n![喜马拉雅哪些项目在使用WebP](https://fdfs.xmcdn.com/group87/M0B/D9/C6/wKg5J19RwV2yZKGIABHJ9dQ0kns286.png)\n\n### 实际效果\n\n喜马拉雅PC站，某Banner图\n\n![实际效果](https://fdfs.xmcdn.com/group83/M04/DB/D0/wKg5I19RwxKg-YgoAC2jJryPl7Q667.png)\n\n### 实际效果2\n\n云吸猫活动，背景大图\n\n![实际效果2](https://fdfs.xmcdn.com/group82/M04/D8/69/wKg5HF9Rw6vg5CI8AAj0eUp--fc655.png)\n\n## 如何在项目中使用WebP\n\n### 图片组件\n\n![@xmly/fast-image](https://fdfs.xmcdn.com/group83/M03/DB/A1/wKg5HV9RxOyj1InzAAJHONgJsJ4604.png)\n\n## 总结\n\n* WebP的优点\n  - 同等质量下图片更小，而且支持有损和无损两种压缩模式\n  - 压缩之后质量无明显变化，图片质量得到保证\n* WebP的缺点\n  - 兼容性问题\n  - WebP在解码时间上比png的图片要长一些，由于减少图片大小，来提高加载速度，总体来说，还是利大于弊，所以不妨碍我们使用\n* @xmly/fast-image\n  - 屏蔽兼容性问题，动态判断是否选用WebP\n  - 提供剪裁功能，进一步减少图片大小\n\n## 相关文章\n\n[@xmly/fast-image](http://gitlab.ximalaya.com/FEA/fast-image/fast-image)\n[实时图片处理接口](http://thoughts.ximalaya.com/workspaces/5ce3850abe825bee8c09d4c7/docs/5ce3853bbe825bee8c09d5ea)","source":"_posts/WebP在喜马拉雅的使用.md","raw":"---\ntitle: WebP在喜马拉雅的使用\ndate: 2020-09-04 10:45:13\ntags:\n---\n\n## 背景\n\n不管是 PC 还是移动端，图片一直是流量大头，以苹果公司 Retina 产品为代表的高 PPI 屏对图片的质量提出了更高的要求，如何保证在图片的精细度不降低的前提下缩小图片体积，成为了一个有价值且值得探索的事情。\n\n但如今对于 JPEG、PNG 和 GIF 这些图片格式的优化几乎已经达到了极致， 若想改变现状开辟新局面，便要有釜底抽薪的胆量和气魄，而 Google 给了我们一个新选择：WebP。\n\n\n## 了解WebP\n\n### 什么是WebP\n\nWebP，是一种支持有损压缩和无损压缩的图片文件格式，派生自图像编码格式 VP8。根据 Google 的测试，无损压缩后的 WebP 比 PNG 文件少了 45％ 的文件大小，即使这些 PNG 文件经过其他压缩工具压缩之后，WebP 还是可以减少 28％ 的文件大小。\n\n### WebP的优点\n\nWebP 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。\n\n![WebP](http://image.uisdc.com/wp-content/uploads/2014/12/20141212164211465-590x201.png)\n\n### WebP的缺点\n\n![测试数据](http://image.uisdc.com/wp-content/uploads/2014/12/20141215144323396.jpg)\n\n* <font color=red>解码耗时：WebP 的解码时间是 PNG 格式的 4.4 倍（24.8ms）</font>\n* 流畅程度：两种格式下，AIO 滑动流畅度无明显差异\n* CPU使用：两种格式下，连续发送 15 个图片，CPU 使用均在 10%—26% 之间波动，两者无明显差异\n* 内存占用：两者格式下，连续发送 15 个图片，内存占用跨度均为 11M，无明显差异\n\n### WebP的浏览器兼容性\n\n![浏览器兼容性](https://fdfs.xmcdn.com/group83/M05/DA/96/wKg5HV9RsCfC5zBDAAR68WSLiPY683.png)\n\n### WebP的IOS客户端兼容情况\n![喜马拉雅IOS客户端支持情况](https://fdfs.xmcdn.com/group86/M03/DB/30/wKg5Jl9RsJLBGTlXAAwm8yCMfQ0620.png)\nIOS大部分还是不支持的\n\n### WebP的Android客户端兼容情况\n![喜马拉雅Android客户端支持情况](https://fdfs.xmcdn.com/group83/M01/DB/A3/wKg5I19Rv7aC0EjcAAZNDJm-DAQ644.png)\nAndroid4.3以上全部支持\n\n### 谁在使用WebP\n\n2010 年发布的 WebP 已经不算是新鲜事物了，在 Google 的明星产品如 Youtube、Gmail、Google Play 中都可以看到 WebP 的身影，而 Chrome 网上商店甚至已完全使用了 WebP。国外公司如 Facebook、ebay 和国内公司如腾讯、淘宝、美团等也早已尝鲜。\n\n![谁在使用WebP](https://fdfs.xmcdn.com/group87/M00/D9/B3/wKg5J19RwCCBqMFvAA_vZ6WNp_E130.png)\n\nYouTube 的视频略缩图采用 WebP 格式后，网页加载速度提升了 10%；谷歌的 Chrome 网上应用商店采用 WebP 格式图片后，每天可以节省几 TB 的带宽，页面平均加载时间大约减少 1/3；Google+ 移动应用采用 WebP 图片格式后，每天节省了 50TB 数据存储空间。\n\n### 喜马拉雅哪些项目在使用WebP\n\n![喜马拉雅哪些项目在使用WebP](https://fdfs.xmcdn.com/group87/M0B/D9/C6/wKg5J19RwV2yZKGIABHJ9dQ0kns286.png)\n\n### 实际效果\n\n喜马拉雅PC站，某Banner图\n\n![实际效果](https://fdfs.xmcdn.com/group83/M04/DB/D0/wKg5I19RwxKg-YgoAC2jJryPl7Q667.png)\n\n### 实际效果2\n\n云吸猫活动，背景大图\n\n![实际效果2](https://fdfs.xmcdn.com/group82/M04/D8/69/wKg5HF9Rw6vg5CI8AAj0eUp--fc655.png)\n\n## 如何在项目中使用WebP\n\n### 图片组件\n\n![@xmly/fast-image](https://fdfs.xmcdn.com/group83/M03/DB/A1/wKg5HV9RxOyj1InzAAJHONgJsJ4604.png)\n\n## 总结\n\n* WebP的优点\n  - 同等质量下图片更小，而且支持有损和无损两种压缩模式\n  - 压缩之后质量无明显变化，图片质量得到保证\n* WebP的缺点\n  - 兼容性问题\n  - WebP在解码时间上比png的图片要长一些，由于减少图片大小，来提高加载速度，总体来说，还是利大于弊，所以不妨碍我们使用\n* @xmly/fast-image\n  - 屏蔽兼容性问题，动态判断是否选用WebP\n  - 提供剪裁功能，进一步减少图片大小\n\n## 相关文章\n\n[@xmly/fast-image](http://gitlab.ximalaya.com/FEA/fast-image/fast-image)\n[实时图片处理接口](http://thoughts.ximalaya.com/workspaces/5ce3850abe825bee8c09d4c7/docs/5ce3853bbe825bee8c09d5ea)","slug":"WebP在喜马拉雅的使用","published":1,"updated":"2021-11-14T17:03:16.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvzhr24m0000lmbmh5qyelxi","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>不管是 PC 还是移动端，图片一直是流量大头，以苹果公司 Retina 产品为代表的高 PPI 屏对图片的质量提出了更高的要求，如何保证在图片的精细度不降低的前提下缩小图片体积，成为了一个有价值且值得探索的事情。</p>\n<p>但如今对于 JPEG、PNG 和 GIF 这些图片格式的优化几乎已经达到了极致， 若想改变现状开辟新局面，便要有釜底抽薪的胆量和气魄，而 Google 给了我们一个新选择：WebP。</p>\n<h2 id=\"了解WebP\"><a href=\"#了解WebP\" class=\"headerlink\" title=\"了解WebP\"></a>了解WebP</h2><h3 id=\"什么是WebP\"><a href=\"#什么是WebP\" class=\"headerlink\" title=\"什么是WebP\"></a>什么是WebP</h3><p>WebP，是一种支持有损压缩和无损压缩的图片文件格式，派生自图像编码格式 VP8。根据 Google 的测试，无损压缩后的 WebP 比 PNG 文件少了 45％ 的文件大小，即使这些 PNG 文件经过其他压缩工具压缩之后，WebP 还是可以减少 28％ 的文件大小。</p>\n<h3 id=\"WebP的优点\"><a href=\"#WebP的优点\" class=\"headerlink\" title=\"WebP的优点\"></a>WebP的优点</h3><p>WebP 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。</p>\n<p><img src=\"http://image.uisdc.com/wp-content/uploads/2014/12/20141212164211465-590x201.png\" alt=\"WebP\"></p>\n<h3 id=\"WebP的缺点\"><a href=\"#WebP的缺点\" class=\"headerlink\" title=\"WebP的缺点\"></a>WebP的缺点</h3><p><img src=\"http://image.uisdc.com/wp-content/uploads/2014/12/20141215144323396.jpg\" alt=\"测试数据\"></p>\n<ul>\n<li><font color=red>解码耗时：WebP 的解码时间是 PNG 格式的 4.4 倍（24.8ms）</font></li>\n<li>流畅程度：两种格式下，AIO 滑动流畅度无明显差异</li>\n<li>CPU使用：两种格式下，连续发送 15 个图片，CPU 使用均在 10%—26% 之间波动，两者无明显差异</li>\n<li>内存占用：两者格式下，连续发送 15 个图片，内存占用跨度均为 11M，无明显差异</li>\n</ul>\n<h3 id=\"WebP的浏览器兼容性\"><a href=\"#WebP的浏览器兼容性\" class=\"headerlink\" title=\"WebP的浏览器兼容性\"></a>WebP的浏览器兼容性</h3><p><img src=\"https://fdfs.xmcdn.com/group83/M05/DA/96/wKg5HV9RsCfC5zBDAAR68WSLiPY683.png\" alt=\"浏览器兼容性\"></p>\n<h3 id=\"WebP的IOS客户端兼容情况\"><a href=\"#WebP的IOS客户端兼容情况\" class=\"headerlink\" title=\"WebP的IOS客户端兼容情况\"></a>WebP的IOS客户端兼容情况</h3><p><img src=\"https://fdfs.xmcdn.com/group86/M03/DB/30/wKg5Jl9RsJLBGTlXAAwm8yCMfQ0620.png\" alt=\"喜马拉雅IOS客户端支持情况\"><br>IOS大部分还是不支持的</p>\n<h3 id=\"WebP的Android客户端兼容情况\"><a href=\"#WebP的Android客户端兼容情况\" class=\"headerlink\" title=\"WebP的Android客户端兼容情况\"></a>WebP的Android客户端兼容情况</h3><p><img src=\"https://fdfs.xmcdn.com/group83/M01/DB/A3/wKg5I19Rv7aC0EjcAAZNDJm-DAQ644.png\" alt=\"喜马拉雅Android客户端支持情况\"><br>Android4.3以上全部支持</p>\n<h3 id=\"谁在使用WebP\"><a href=\"#谁在使用WebP\" class=\"headerlink\" title=\"谁在使用WebP\"></a>谁在使用WebP</h3><p>2010 年发布的 WebP 已经不算是新鲜事物了，在 Google 的明星产品如 Youtube、Gmail、Google Play 中都可以看到 WebP 的身影，而 Chrome 网上商店甚至已完全使用了 WebP。国外公司如 Facebook、ebay 和国内公司如腾讯、淘宝、美团等也早已尝鲜。</p>\n<p><img src=\"https://fdfs.xmcdn.com/group87/M00/D9/B3/wKg5J19RwCCBqMFvAA_vZ6WNp_E130.png\" alt=\"谁在使用WebP\"></p>\n<p>YouTube 的视频略缩图采用 WebP 格式后，网页加载速度提升了 10%；谷歌的 Chrome 网上应用商店采用 WebP 格式图片后，每天可以节省几 TB 的带宽，页面平均加载时间大约减少 1/3；Google+ 移动应用采用 WebP 图片格式后，每天节省了 50TB 数据存储空间。</p>\n<h3 id=\"喜马拉雅哪些项目在使用WebP\"><a href=\"#喜马拉雅哪些项目在使用WebP\" class=\"headerlink\" title=\"喜马拉雅哪些项目在使用WebP\"></a>喜马拉雅哪些项目在使用WebP</h3><p><img src=\"https://fdfs.xmcdn.com/group87/M0B/D9/C6/wKg5J19RwV2yZKGIABHJ9dQ0kns286.png\" alt=\"喜马拉雅哪些项目在使用WebP\"></p>\n<h3 id=\"实际效果\"><a href=\"#实际效果\" class=\"headerlink\" title=\"实际效果\"></a>实际效果</h3><p>喜马拉雅PC站，某Banner图</p>\n<p><img src=\"https://fdfs.xmcdn.com/group83/M04/DB/D0/wKg5I19RwxKg-YgoAC2jJryPl7Q667.png\" alt=\"实际效果\"></p>\n<h3 id=\"实际效果2\"><a href=\"#实际效果2\" class=\"headerlink\" title=\"实际效果2\"></a>实际效果2</h3><p>云吸猫活动，背景大图</p>\n<p><img src=\"https://fdfs.xmcdn.com/group82/M04/D8/69/wKg5HF9Rw6vg5CI8AAj0eUp--fc655.png\" alt=\"实际效果2\"></p>\n<h2 id=\"如何在项目中使用WebP\"><a href=\"#如何在项目中使用WebP\" class=\"headerlink\" title=\"如何在项目中使用WebP\"></a>如何在项目中使用WebP</h2><h3 id=\"图片组件\"><a href=\"#图片组件\" class=\"headerlink\" title=\"图片组件\"></a>图片组件</h3><p><img src=\"https://fdfs.xmcdn.com/group83/M03/DB/A1/wKg5HV9RxOyj1InzAAJHONgJsJ4604.png\" alt=\"@xmly/fast-image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>WebP的优点<ul>\n<li>同等质量下图片更小，而且支持有损和无损两种压缩模式</li>\n<li>压缩之后质量无明显变化，图片质量得到保证</li>\n</ul>\n</li>\n<li>WebP的缺点<ul>\n<li>兼容性问题</li>\n<li>WebP在解码时间上比png的图片要长一些，由于减少图片大小，来提高加载速度，总体来说，还是利大于弊，所以不妨碍我们使用</li>\n</ul>\n</li>\n<li>@xmly/fast-image<ul>\n<li>屏蔽兼容性问题，动态判断是否选用WebP</li>\n<li>提供剪裁功能，进一步减少图片大小</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><p><a href=\"http://gitlab.ximalaya.com/FEA/fast-image/fast-image\">@xmly/fast-image</a><br><a href=\"http://thoughts.ximalaya.com/workspaces/5ce3850abe825bee8c09d4c7/docs/5ce3853bbe825bee8c09d5ea\">实时图片处理接口</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>不管是 PC 还是移动端，图片一直是流量大头，以苹果公司 Retina 产品为代表的高 PPI 屏对图片的质量提出了更高的要求，如何保证在图片的精细度不降低的前提下缩小图片体积，成为了一个有价值且值得探索的事情。</p>\n<p>但如今对于 JPEG、PNG 和 GIF 这些图片格式的优化几乎已经达到了极致， 若想改变现状开辟新局面，便要有釜底抽薪的胆量和气魄，而 Google 给了我们一个新选择：WebP。</p>\n<h2 id=\"了解WebP\"><a href=\"#了解WebP\" class=\"headerlink\" title=\"了解WebP\"></a>了解WebP</h2><h3 id=\"什么是WebP\"><a href=\"#什么是WebP\" class=\"headerlink\" title=\"什么是WebP\"></a>什么是WebP</h3><p>WebP，是一种支持有损压缩和无损压缩的图片文件格式，派生自图像编码格式 VP8。根据 Google 的测试，无损压缩后的 WebP 比 PNG 文件少了 45％ 的文件大小，即使这些 PNG 文件经过其他压缩工具压缩之后，WebP 还是可以减少 28％ 的文件大小。</p>\n<h3 id=\"WebP的优点\"><a href=\"#WebP的优点\" class=\"headerlink\" title=\"WebP的优点\"></a>WebP的优点</h3><p>WebP 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。</p>\n<p><img src=\"http://image.uisdc.com/wp-content/uploads/2014/12/20141212164211465-590x201.png\" alt=\"WebP\"></p>\n<h3 id=\"WebP的缺点\"><a href=\"#WebP的缺点\" class=\"headerlink\" title=\"WebP的缺点\"></a>WebP的缺点</h3><p><img src=\"http://image.uisdc.com/wp-content/uploads/2014/12/20141215144323396.jpg\" alt=\"测试数据\"></p>\n<ul>\n<li><font color=red>解码耗时：WebP 的解码时间是 PNG 格式的 4.4 倍（24.8ms）</font></li>\n<li>流畅程度：两种格式下，AIO 滑动流畅度无明显差异</li>\n<li>CPU使用：两种格式下，连续发送 15 个图片，CPU 使用均在 10%—26% 之间波动，两者无明显差异</li>\n<li>内存占用：两者格式下，连续发送 15 个图片，内存占用跨度均为 11M，无明显差异</li>\n</ul>\n<h3 id=\"WebP的浏览器兼容性\"><a href=\"#WebP的浏览器兼容性\" class=\"headerlink\" title=\"WebP的浏览器兼容性\"></a>WebP的浏览器兼容性</h3><p><img src=\"https://fdfs.xmcdn.com/group83/M05/DA/96/wKg5HV9RsCfC5zBDAAR68WSLiPY683.png\" alt=\"浏览器兼容性\"></p>\n<h3 id=\"WebP的IOS客户端兼容情况\"><a href=\"#WebP的IOS客户端兼容情况\" class=\"headerlink\" title=\"WebP的IOS客户端兼容情况\"></a>WebP的IOS客户端兼容情况</h3><p><img src=\"https://fdfs.xmcdn.com/group86/M03/DB/30/wKg5Jl9RsJLBGTlXAAwm8yCMfQ0620.png\" alt=\"喜马拉雅IOS客户端支持情况\"><br>IOS大部分还是不支持的</p>\n<h3 id=\"WebP的Android客户端兼容情况\"><a href=\"#WebP的Android客户端兼容情况\" class=\"headerlink\" title=\"WebP的Android客户端兼容情况\"></a>WebP的Android客户端兼容情况</h3><p><img src=\"https://fdfs.xmcdn.com/group83/M01/DB/A3/wKg5I19Rv7aC0EjcAAZNDJm-DAQ644.png\" alt=\"喜马拉雅Android客户端支持情况\"><br>Android4.3以上全部支持</p>\n<h3 id=\"谁在使用WebP\"><a href=\"#谁在使用WebP\" class=\"headerlink\" title=\"谁在使用WebP\"></a>谁在使用WebP</h3><p>2010 年发布的 WebP 已经不算是新鲜事物了，在 Google 的明星产品如 Youtube、Gmail、Google Play 中都可以看到 WebP 的身影，而 Chrome 网上商店甚至已完全使用了 WebP。国外公司如 Facebook、ebay 和国内公司如腾讯、淘宝、美团等也早已尝鲜。</p>\n<p><img src=\"https://fdfs.xmcdn.com/group87/M00/D9/B3/wKg5J19RwCCBqMFvAA_vZ6WNp_E130.png\" alt=\"谁在使用WebP\"></p>\n<p>YouTube 的视频略缩图采用 WebP 格式后，网页加载速度提升了 10%；谷歌的 Chrome 网上应用商店采用 WebP 格式图片后，每天可以节省几 TB 的带宽，页面平均加载时间大约减少 1/3；Google+ 移动应用采用 WebP 图片格式后，每天节省了 50TB 数据存储空间。</p>\n<h3 id=\"喜马拉雅哪些项目在使用WebP\"><a href=\"#喜马拉雅哪些项目在使用WebP\" class=\"headerlink\" title=\"喜马拉雅哪些项目在使用WebP\"></a>喜马拉雅哪些项目在使用WebP</h3><p><img src=\"https://fdfs.xmcdn.com/group87/M0B/D9/C6/wKg5J19RwV2yZKGIABHJ9dQ0kns286.png\" alt=\"喜马拉雅哪些项目在使用WebP\"></p>\n<h3 id=\"实际效果\"><a href=\"#实际效果\" class=\"headerlink\" title=\"实际效果\"></a>实际效果</h3><p>喜马拉雅PC站，某Banner图</p>\n<p><img src=\"https://fdfs.xmcdn.com/group83/M04/DB/D0/wKg5I19RwxKg-YgoAC2jJryPl7Q667.png\" alt=\"实际效果\"></p>\n<h3 id=\"实际效果2\"><a href=\"#实际效果2\" class=\"headerlink\" title=\"实际效果2\"></a>实际效果2</h3><p>云吸猫活动，背景大图</p>\n<p><img src=\"https://fdfs.xmcdn.com/group82/M04/D8/69/wKg5HF9Rw6vg5CI8AAj0eUp--fc655.png\" alt=\"实际效果2\"></p>\n<h2 id=\"如何在项目中使用WebP\"><a href=\"#如何在项目中使用WebP\" class=\"headerlink\" title=\"如何在项目中使用WebP\"></a>如何在项目中使用WebP</h2><h3 id=\"图片组件\"><a href=\"#图片组件\" class=\"headerlink\" title=\"图片组件\"></a>图片组件</h3><p><img src=\"https://fdfs.xmcdn.com/group83/M03/DB/A1/wKg5HV9RxOyj1InzAAJHONgJsJ4604.png\" alt=\"@xmly/fast-image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>WebP的优点<ul>\n<li>同等质量下图片更小，而且支持有损和无损两种压缩模式</li>\n<li>压缩之后质量无明显变化，图片质量得到保证</li>\n</ul>\n</li>\n<li>WebP的缺点<ul>\n<li>兼容性问题</li>\n<li>WebP在解码时间上比png的图片要长一些，由于减少图片大小，来提高加载速度，总体来说，还是利大于弊，所以不妨碍我们使用</li>\n</ul>\n</li>\n<li>@xmly/fast-image<ul>\n<li>屏蔽兼容性问题，动态判断是否选用WebP</li>\n<li>提供剪裁功能，进一步减少图片大小</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><p><a href=\"http://gitlab.ximalaya.com/FEA/fast-image/fast-image\">@xmly/fast-image</a><br><a href=\"http://thoughts.ximalaya.com/workspaces/5ce3850abe825bee8c09d4c7/docs/5ce3853bbe825bee8c09d5ea\">实时图片处理接口</a></p>\n"},{"title":"js实现一个发布订阅","date":"2020-05-28T11:14:44.000Z","_content":"\n## js设计模式之发布-订阅模式\n\n发布-订阅模式又叫观察者模式，它用来定义一种一对多的依赖关系。当某个对象发生改变的时候，所有依赖于它的对象都将得到通知。在js中，通常用事件模型来代替传统的发布订阅模式（因为js没有类，可以直接传递函数）。\n\n\n\n## 发布订阅模式的作用\n\n  **第一点**广泛用于异步编程中，这是一种代替传统回调函数的手段。比如我们监听异步请求的success和error事件。当事件来临 的时候，发布一个状态，那么对此感兴趣的订阅者就会收到这个状态并执行相关操作。\n  \n  **第二点**在程序方面带来的好处是可以改变对象之间的硬编码的通知机制。一个对象不再显式地去调用另外一个对象的某个接口。发布订阅模式将两个对象松耦合地联系在一起，虽然不清除彼此细节，但并不影响彼此通信。无论发布者还是订阅者发生了变化，只要它们之间的约定没有变，就没有关系。\n  \n\n## 常见的订阅发布模式--DOM事件\n\nwindow.addEventListener就是一个典型的例子。\n```\n  document.body.addEventListener('click', fn1);\n  document.body.addEventListener('click', fn2);\n  document.body.addEventListener('click', fn3);\n```\n\n用户可能会点击页面，但不知道什么时候点击。所以我们订阅body的click事件，当body被点击的时候，body节点便会向订阅者发布这个消息。\n\n当然我们还可以随意移除订阅者，通过removeEventListener事件。\n\n## 实现一个简单的发布订阅模式\n\n除了内置的DOM事件，我们还会经常实现一些自定义的事件，这种依靠自定义事件完成的发布-订阅模式可以用于任何js的代码中。现在来实现一个简单的发布订阅模式。\n\n- 首先需要一个发布者对象\n- 发布者需要维护一个缓存队列，用于存放订阅对象的订阅回调\n- 订阅者可以向事件列表中添加一个事件 表示订阅\n- 发布消息时 遍历事件列表 去执行所有事件\n\n```\n  class CustomEvent {\n    private clientList = [] // 回调列表\n\n    constructor() {\n      \n    }\n\n    // 订阅通知\n    listen(fn: () => void) {\n      this.clientList.push(fn)\n    }\n\n    // 发送通知\n    trigger(...args) {\n      this.clientList.forEach(fn => fn(args))\n    }\n  }\n```\n\n但是，上面的代码有一个问题，没有区分订阅的事件类型,并且没有取消订阅的功能\n\n## 发布订阅的通用实现\n\n\n```\n  class CustomEvent {\n    private clientList = {}\n\n    constructor() {\n\n    }\n\n    // 订阅通知\n    addListener(type: string, fn: (...args: any) => void) {\n      if (!this.clientList[type]) {\n        this.clientList[type] = []\n      }\n      this.clientList[type].push(fn)\n    }\n\n    // 取消订阅\n    removeListener(type) {\n      if(!type){\n        this.clientList = {}\n      }\n      this.clientList[type] = []\n    }\n\n    // 发送通知\n    trigger(type, ...args) {\n      const fns = this.clientList[type]\n      if (!fns || fns.length <= 0) {\n        return\n      }\n      fns.forEach(fn => {\n        fn.apply(this, args)\n      });\n    }\n  }\n```\n\n## 小结\n\n发布订阅者模式在实际开发中非常有用。\n\n发布订阅的优点非常明显，一是时间上的解耦，而是对象间的解耦。\n\n- 时间上的解耦: 在异步编程中，由于无法确定异步加载的时间，有可能订阅事件的模块还没有初始化完毕而异步加载就完成了，发布者就已经发布事件了。通过发布订阅模式，可以将发布者的事件提前保存起来，等到发布者加载完毕再执行。\n- 对象间的解耦：发布订阅模式中，发布者和订阅者可以不必知道对方的存在，而是通过中介对象来通信。\n\n发布订阅模式还可以用来帮助实现一些别的设计模式，比如中介者模式。从架构上看，无论是MVC还是MVVM，都少不了发布订阅模式的参与，而且js语言本身也是一门基于事件驱动的语言。\n\n当然，发布订阅模式也不是没有缺点。\n\n- 创建订阅者本身需要一定的时间和内存，而当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。\n- 另外，发布订阅模式将对象间完全解耦，如果过度使用的话，对象和对象之间的必要联系就会被掩盖，会导致程序难以追踪和理解。\n\n## 参考文章\n\n[js设计模式之发布-订阅模式](https://juejin.im/post/5c44236be51d4511dc72db58)","source":"_posts/js实现一个发布订阅.md","raw":"---\ntitle: js实现一个发布订阅\ndate: 2020-05-28 19:14:44\ntags: JS JS基础 面试题 进阶\n---\n\n## js设计模式之发布-订阅模式\n\n发布-订阅模式又叫观察者模式，它用来定义一种一对多的依赖关系。当某个对象发生改变的时候，所有依赖于它的对象都将得到通知。在js中，通常用事件模型来代替传统的发布订阅模式（因为js没有类，可以直接传递函数）。\n\n\n\n## 发布订阅模式的作用\n\n  **第一点**广泛用于异步编程中，这是一种代替传统回调函数的手段。比如我们监听异步请求的success和error事件。当事件来临 的时候，发布一个状态，那么对此感兴趣的订阅者就会收到这个状态并执行相关操作。\n  \n  **第二点**在程序方面带来的好处是可以改变对象之间的硬编码的通知机制。一个对象不再显式地去调用另外一个对象的某个接口。发布订阅模式将两个对象松耦合地联系在一起，虽然不清除彼此细节，但并不影响彼此通信。无论发布者还是订阅者发生了变化，只要它们之间的约定没有变，就没有关系。\n  \n\n## 常见的订阅发布模式--DOM事件\n\nwindow.addEventListener就是一个典型的例子。\n```\n  document.body.addEventListener('click', fn1);\n  document.body.addEventListener('click', fn2);\n  document.body.addEventListener('click', fn3);\n```\n\n用户可能会点击页面，但不知道什么时候点击。所以我们订阅body的click事件，当body被点击的时候，body节点便会向订阅者发布这个消息。\n\n当然我们还可以随意移除订阅者，通过removeEventListener事件。\n\n## 实现一个简单的发布订阅模式\n\n除了内置的DOM事件，我们还会经常实现一些自定义的事件，这种依靠自定义事件完成的发布-订阅模式可以用于任何js的代码中。现在来实现一个简单的发布订阅模式。\n\n- 首先需要一个发布者对象\n- 发布者需要维护一个缓存队列，用于存放订阅对象的订阅回调\n- 订阅者可以向事件列表中添加一个事件 表示订阅\n- 发布消息时 遍历事件列表 去执行所有事件\n\n```\n  class CustomEvent {\n    private clientList = [] // 回调列表\n\n    constructor() {\n      \n    }\n\n    // 订阅通知\n    listen(fn: () => void) {\n      this.clientList.push(fn)\n    }\n\n    // 发送通知\n    trigger(...args) {\n      this.clientList.forEach(fn => fn(args))\n    }\n  }\n```\n\n但是，上面的代码有一个问题，没有区分订阅的事件类型,并且没有取消订阅的功能\n\n## 发布订阅的通用实现\n\n\n```\n  class CustomEvent {\n    private clientList = {}\n\n    constructor() {\n\n    }\n\n    // 订阅通知\n    addListener(type: string, fn: (...args: any) => void) {\n      if (!this.clientList[type]) {\n        this.clientList[type] = []\n      }\n      this.clientList[type].push(fn)\n    }\n\n    // 取消订阅\n    removeListener(type) {\n      if(!type){\n        this.clientList = {}\n      }\n      this.clientList[type] = []\n    }\n\n    // 发送通知\n    trigger(type, ...args) {\n      const fns = this.clientList[type]\n      if (!fns || fns.length <= 0) {\n        return\n      }\n      fns.forEach(fn => {\n        fn.apply(this, args)\n      });\n    }\n  }\n```\n\n## 小结\n\n发布订阅者模式在实际开发中非常有用。\n\n发布订阅的优点非常明显，一是时间上的解耦，而是对象间的解耦。\n\n- 时间上的解耦: 在异步编程中，由于无法确定异步加载的时间，有可能订阅事件的模块还没有初始化完毕而异步加载就完成了，发布者就已经发布事件了。通过发布订阅模式，可以将发布者的事件提前保存起来，等到发布者加载完毕再执行。\n- 对象间的解耦：发布订阅模式中，发布者和订阅者可以不必知道对方的存在，而是通过中介对象来通信。\n\n发布订阅模式还可以用来帮助实现一些别的设计模式，比如中介者模式。从架构上看，无论是MVC还是MVVM，都少不了发布订阅模式的参与，而且js语言本身也是一门基于事件驱动的语言。\n\n当然，发布订阅模式也不是没有缺点。\n\n- 创建订阅者本身需要一定的时间和内存，而当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。\n- 另外，发布订阅模式将对象间完全解耦，如果过度使用的话，对象和对象之间的必要联系就会被掩盖，会导致程序难以追踪和理解。\n\n## 参考文章\n\n[js设计模式之发布-订阅模式](https://juejin.im/post/5c44236be51d4511dc72db58)","slug":"js实现一个发布订阅","published":1,"updated":"2021-11-14T17:03:15.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvzhr24p0001lmbmbxnmf14x","content":"<h2 id=\"js设计模式之发布-订阅模式\"><a href=\"#js设计模式之发布-订阅模式\" class=\"headerlink\" title=\"js设计模式之发布-订阅模式\"></a>js设计模式之发布-订阅模式</h2><p>发布-订阅模式又叫观察者模式，它用来定义一种一对多的依赖关系。当某个对象发生改变的时候，所有依赖于它的对象都将得到通知。在js中，通常用事件模型来代替传统的发布订阅模式（因为js没有类，可以直接传递函数）。</p>\n<h2 id=\"发布订阅模式的作用\"><a href=\"#发布订阅模式的作用\" class=\"headerlink\" title=\"发布订阅模式的作用\"></a>发布订阅模式的作用</h2><p>  <strong>第一点</strong>广泛用于异步编程中，这是一种代替传统回调函数的手段。比如我们监听异步请求的success和error事件。当事件来临 的时候，发布一个状态，那么对此感兴趣的订阅者就会收到这个状态并执行相关操作。</p>\n<p>  <strong>第二点</strong>在程序方面带来的好处是可以改变对象之间的硬编码的通知机制。一个对象不再显式地去调用另外一个对象的某个接口。发布订阅模式将两个对象松耦合地联系在一起，虽然不清除彼此细节，但并不影响彼此通信。无论发布者还是订阅者发生了变化，只要它们之间的约定没有变，就没有关系。</p>\n<h2 id=\"常见的订阅发布模式–DOM事件\"><a href=\"#常见的订阅发布模式–DOM事件\" class=\"headerlink\" title=\"常见的订阅发布模式–DOM事件\"></a>常见的订阅发布模式–DOM事件</h2><p>window.addEventListener就是一个典型的例子。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.body.addEventListener(&#x27;click&#x27;, fn1);</span><br><span class=\"line\">document.body.addEventListener(&#x27;click&#x27;, fn2);</span><br><span class=\"line\">document.body.addEventListener(&#x27;click&#x27;, fn3);</span><br></pre></td></tr></table></figure>\n\n<p>用户可能会点击页面，但不知道什么时候点击。所以我们订阅body的click事件，当body被点击的时候，body节点便会向订阅者发布这个消息。</p>\n<p>当然我们还可以随意移除订阅者，通过removeEventListener事件。</p>\n<h2 id=\"实现一个简单的发布订阅模式\"><a href=\"#实现一个简单的发布订阅模式\" class=\"headerlink\" title=\"实现一个简单的发布订阅模式\"></a>实现一个简单的发布订阅模式</h2><p>除了内置的DOM事件，我们还会经常实现一些自定义的事件，这种依靠自定义事件完成的发布-订阅模式可以用于任何js的代码中。现在来实现一个简单的发布订阅模式。</p>\n<ul>\n<li>首先需要一个发布者对象</li>\n<li>发布者需要维护一个缓存队列，用于存放订阅对象的订阅回调</li>\n<li>订阅者可以向事件列表中添加一个事件 表示订阅</li>\n<li>发布消息时 遍历事件列表 去执行所有事件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CustomEvent &#123;</span><br><span class=\"line\">  private clientList = [] // 回调列表</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 订阅通知</span><br><span class=\"line\">  listen(fn: () =&gt; void) &#123;</span><br><span class=\"line\">    this.clientList.push(fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 发送通知</span><br><span class=\"line\">  trigger(...args) &#123;</span><br><span class=\"line\">    this.clientList.forEach(fn =&gt; fn(args))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，上面的代码有一个问题，没有区分订阅的事件类型,并且没有取消订阅的功能</p>\n<h2 id=\"发布订阅的通用实现\"><a href=\"#发布订阅的通用实现\" class=\"headerlink\" title=\"发布订阅的通用实现\"></a>发布订阅的通用实现</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CustomEvent &#123;</span><br><span class=\"line\">  private clientList = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 订阅通知</span><br><span class=\"line\">  addListener(type: string, fn: (...args: any) =&gt; void) &#123;</span><br><span class=\"line\">    if (!this.clientList[type]) &#123;</span><br><span class=\"line\">      this.clientList[type] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.clientList[type].push(fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 取消订阅</span><br><span class=\"line\">  removeListener(type) &#123;</span><br><span class=\"line\">    if(!type)&#123;</span><br><span class=\"line\">      this.clientList = &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.clientList[type] = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 发送通知</span><br><span class=\"line\">  trigger(type, ...args) &#123;</span><br><span class=\"line\">    const fns = this.clientList[type]</span><br><span class=\"line\">    if (!fns || fns.length &lt;= 0) &#123;</span><br><span class=\"line\">      return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fns.forEach(fn =&gt; &#123;</span><br><span class=\"line\">      fn.apply(this, args)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>发布订阅者模式在实际开发中非常有用。</p>\n<p>发布订阅的优点非常明显，一是时间上的解耦，而是对象间的解耦。</p>\n<ul>\n<li>时间上的解耦: 在异步编程中，由于无法确定异步加载的时间，有可能订阅事件的模块还没有初始化完毕而异步加载就完成了，发布者就已经发布事件了。通过发布订阅模式，可以将发布者的事件提前保存起来，等到发布者加载完毕再执行。</li>\n<li>对象间的解耦：发布订阅模式中，发布者和订阅者可以不必知道对方的存在，而是通过中介对象来通信。</li>\n</ul>\n<p>发布订阅模式还可以用来帮助实现一些别的设计模式，比如中介者模式。从架构上看，无论是MVC还是MVVM，都少不了发布订阅模式的参与，而且js语言本身也是一门基于事件驱动的语言。</p>\n<p>当然，发布订阅模式也不是没有缺点。</p>\n<ul>\n<li>创建订阅者本身需要一定的时间和内存，而当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。</li>\n<li>另外，发布订阅模式将对象间完全解耦，如果过度使用的话，对象和对象之间的必要联系就会被掩盖，会导致程序难以追踪和理解。</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://juejin.im/post/5c44236be51d4511dc72db58\">js设计模式之发布-订阅模式</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"js设计模式之发布-订阅模式\"><a href=\"#js设计模式之发布-订阅模式\" class=\"headerlink\" title=\"js设计模式之发布-订阅模式\"></a>js设计模式之发布-订阅模式</h2><p>发布-订阅模式又叫观察者模式，它用来定义一种一对多的依赖关系。当某个对象发生改变的时候，所有依赖于它的对象都将得到通知。在js中，通常用事件模型来代替传统的发布订阅模式（因为js没有类，可以直接传递函数）。</p>\n<h2 id=\"发布订阅模式的作用\"><a href=\"#发布订阅模式的作用\" class=\"headerlink\" title=\"发布订阅模式的作用\"></a>发布订阅模式的作用</h2><p>  <strong>第一点</strong>广泛用于异步编程中，这是一种代替传统回调函数的手段。比如我们监听异步请求的success和error事件。当事件来临 的时候，发布一个状态，那么对此感兴趣的订阅者就会收到这个状态并执行相关操作。</p>\n<p>  <strong>第二点</strong>在程序方面带来的好处是可以改变对象之间的硬编码的通知机制。一个对象不再显式地去调用另外一个对象的某个接口。发布订阅模式将两个对象松耦合地联系在一起，虽然不清除彼此细节，但并不影响彼此通信。无论发布者还是订阅者发生了变化，只要它们之间的约定没有变，就没有关系。</p>\n<h2 id=\"常见的订阅发布模式–DOM事件\"><a href=\"#常见的订阅发布模式–DOM事件\" class=\"headerlink\" title=\"常见的订阅发布模式–DOM事件\"></a>常见的订阅发布模式–DOM事件</h2><p>window.addEventListener就是一个典型的例子。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.body.addEventListener(&#x27;click&#x27;, fn1);</span><br><span class=\"line\">document.body.addEventListener(&#x27;click&#x27;, fn2);</span><br><span class=\"line\">document.body.addEventListener(&#x27;click&#x27;, fn3);</span><br></pre></td></tr></table></figure>\n\n<p>用户可能会点击页面，但不知道什么时候点击。所以我们订阅body的click事件，当body被点击的时候，body节点便会向订阅者发布这个消息。</p>\n<p>当然我们还可以随意移除订阅者，通过removeEventListener事件。</p>\n<h2 id=\"实现一个简单的发布订阅模式\"><a href=\"#实现一个简单的发布订阅模式\" class=\"headerlink\" title=\"实现一个简单的发布订阅模式\"></a>实现一个简单的发布订阅模式</h2><p>除了内置的DOM事件，我们还会经常实现一些自定义的事件，这种依靠自定义事件完成的发布-订阅模式可以用于任何js的代码中。现在来实现一个简单的发布订阅模式。</p>\n<ul>\n<li>首先需要一个发布者对象</li>\n<li>发布者需要维护一个缓存队列，用于存放订阅对象的订阅回调</li>\n<li>订阅者可以向事件列表中添加一个事件 表示订阅</li>\n<li>发布消息时 遍历事件列表 去执行所有事件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CustomEvent &#123;</span><br><span class=\"line\">  private clientList = [] // 回调列表</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 订阅通知</span><br><span class=\"line\">  listen(fn: () =&gt; void) &#123;</span><br><span class=\"line\">    this.clientList.push(fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 发送通知</span><br><span class=\"line\">  trigger(...args) &#123;</span><br><span class=\"line\">    this.clientList.forEach(fn =&gt; fn(args))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，上面的代码有一个问题，没有区分订阅的事件类型,并且没有取消订阅的功能</p>\n<h2 id=\"发布订阅的通用实现\"><a href=\"#发布订阅的通用实现\" class=\"headerlink\" title=\"发布订阅的通用实现\"></a>发布订阅的通用实现</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CustomEvent &#123;</span><br><span class=\"line\">  private clientList = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 订阅通知</span><br><span class=\"line\">  addListener(type: string, fn: (...args: any) =&gt; void) &#123;</span><br><span class=\"line\">    if (!this.clientList[type]) &#123;</span><br><span class=\"line\">      this.clientList[type] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.clientList[type].push(fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 取消订阅</span><br><span class=\"line\">  removeListener(type) &#123;</span><br><span class=\"line\">    if(!type)&#123;</span><br><span class=\"line\">      this.clientList = &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.clientList[type] = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 发送通知</span><br><span class=\"line\">  trigger(type, ...args) &#123;</span><br><span class=\"line\">    const fns = this.clientList[type]</span><br><span class=\"line\">    if (!fns || fns.length &lt;= 0) &#123;</span><br><span class=\"line\">      return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fns.forEach(fn =&gt; &#123;</span><br><span class=\"line\">      fn.apply(this, args)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>发布订阅者模式在实际开发中非常有用。</p>\n<p>发布订阅的优点非常明显，一是时间上的解耦，而是对象间的解耦。</p>\n<ul>\n<li>时间上的解耦: 在异步编程中，由于无法确定异步加载的时间，有可能订阅事件的模块还没有初始化完毕而异步加载就完成了，发布者就已经发布事件了。通过发布订阅模式，可以将发布者的事件提前保存起来，等到发布者加载完毕再执行。</li>\n<li>对象间的解耦：发布订阅模式中，发布者和订阅者可以不必知道对方的存在，而是通过中介对象来通信。</li>\n</ul>\n<p>发布订阅模式还可以用来帮助实现一些别的设计模式，比如中介者模式。从架构上看，无论是MVC还是MVVM，都少不了发布订阅模式的参与，而且js语言本身也是一门基于事件驱动的语言。</p>\n<p>当然，发布订阅模式也不是没有缺点。</p>\n<ul>\n<li>创建订阅者本身需要一定的时间和内存，而当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。</li>\n<li>另外，发布订阅模式将对象间完全解耦，如果过度使用的话，对象和对象之间的必要联系就会被掩盖，会导致程序难以追踪和理解。</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://juejin.im/post/5c44236be51d4511dc72db58\">js设计模式之发布-订阅模式</a></p>\n"},{"title":"在浏览器输入URL后，按下回车之后发生了什么？","date":"2021-02-09T10:39:01.000Z","_content":"\n## 前言\n\n这是一个可以无限难的问题。出这个题目的目的就是为了考察你的 web 基础深入到什么程度。今天来谈谈我自己的理解，因为牵涉内容很广，里面知识点细节非常多，不能面面俱到，后续会展开单个只是点的详细的话题。希望对大家有帮助。\n\n## 大致顺序\n\n1. URL 解析\n2. DNS 查询\n3. TCP 连接\n4. 处理请求\n5. 接受响应\n6. 渲染页面\n\n## 一、URL解析\n\n### 地址解析：\n\n首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。\n\n### HSTS\n\n由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。\n\n### 其他操作\n\n浏览器还会进行一些额外的操作，比如安全检查、访问限制。\n\n### 检查缓存\n\n![缓存](https://fdfs.xmcdn.com/storages/17d4-audiofreehighqps/1F/F8/CMCoOSED-DGeAAFq6wCGDg4k.png)","source":"_posts/在浏览器输入URL，按下回车之后发生了什么？.md","raw":"---\ntitle: 在浏览器输入URL后，按下回车之后发生了什么？\ndate: 2021-02-09 18:39:01\ntags: JS 前端 面试 基础\n---\n\n## 前言\n\n这是一个可以无限难的问题。出这个题目的目的就是为了考察你的 web 基础深入到什么程度。今天来谈谈我自己的理解，因为牵涉内容很广，里面知识点细节非常多，不能面面俱到，后续会展开单个只是点的详细的话题。希望对大家有帮助。\n\n## 大致顺序\n\n1. URL 解析\n2. DNS 查询\n3. TCP 连接\n4. 处理请求\n5. 接受响应\n6. 渲染页面\n\n## 一、URL解析\n\n### 地址解析：\n\n首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。\n\n### HSTS\n\n由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。\n\n### 其他操作\n\n浏览器还会进行一些额外的操作，比如安全检查、访问限制。\n\n### 检查缓存\n\n![缓存](https://fdfs.xmcdn.com/storages/17d4-audiofreehighqps/1F/F8/CMCoOSED-DGeAAFq6wCGDg4k.png)","slug":"在浏览器输入URL，按下回车之后发生了什么？","published":1,"updated":"2021-11-14T17:03:14.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvzhr24q0002lmbmcholatw2","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这是一个可以无限难的问题。出这个题目的目的就是为了考察你的 web 基础深入到什么程度。今天来谈谈我自己的理解，因为牵涉内容很广，里面知识点细节非常多，不能面面俱到，后续会展开单个只是点的详细的话题。希望对大家有帮助。</p>\n<h2 id=\"大致顺序\"><a href=\"#大致顺序\" class=\"headerlink\" title=\"大致顺序\"></a>大致顺序</h2><ol>\n<li>URL 解析</li>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>处理请求</li>\n<li>接受响应</li>\n<li>渲染页面</li>\n</ol>\n<h2 id=\"一、URL解析\"><a href=\"#一、URL解析\" class=\"headerlink\" title=\"一、URL解析\"></a>一、URL解析</h2><h3 id=\"地址解析：\"><a href=\"#地址解析：\" class=\"headerlink\" title=\"地址解析：\"></a>地址解析：</h3><p>首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</p>\n<h3 id=\"HSTS\"><a href=\"#HSTS\" class=\"headerlink\" title=\"HSTS\"></a>HSTS</h3><p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。</p>\n<h3 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h3><p>浏览器还会进行一些额外的操作，比如安全检查、访问限制。</p>\n<h3 id=\"检查缓存\"><a href=\"#检查缓存\" class=\"headerlink\" title=\"检查缓存\"></a>检查缓存</h3><p><img src=\"https://fdfs.xmcdn.com/storages/17d4-audiofreehighqps/1F/F8/CMCoOSED-DGeAAFq6wCGDg4k.png\" alt=\"缓存\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这是一个可以无限难的问题。出这个题目的目的就是为了考察你的 web 基础深入到什么程度。今天来谈谈我自己的理解，因为牵涉内容很广，里面知识点细节非常多，不能面面俱到，后续会展开单个只是点的详细的话题。希望对大家有帮助。</p>\n<h2 id=\"大致顺序\"><a href=\"#大致顺序\" class=\"headerlink\" title=\"大致顺序\"></a>大致顺序</h2><ol>\n<li>URL 解析</li>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>处理请求</li>\n<li>接受响应</li>\n<li>渲染页面</li>\n</ol>\n<h2 id=\"一、URL解析\"><a href=\"#一、URL解析\" class=\"headerlink\" title=\"一、URL解析\"></a>一、URL解析</h2><h3 id=\"地址解析：\"><a href=\"#地址解析：\" class=\"headerlink\" title=\"地址解析：\"></a>地址解析：</h3><p>首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</p>\n<h3 id=\"HSTS\"><a href=\"#HSTS\" class=\"headerlink\" title=\"HSTS\"></a>HSTS</h3><p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。</p>\n<h3 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h3><p>浏览器还会进行一些额外的操作，比如安全检查、访问限制。</p>\n<h3 id=\"检查缓存\"><a href=\"#检查缓存\" class=\"headerlink\" title=\"检查缓存\"></a>检查缓存</h3><p><img src=\"https://fdfs.xmcdn.com/storages/17d4-audiofreehighqps/1F/F8/CMCoOSED-DGeAAFq6wCGDg4k.png\" alt=\"缓存\"></p>\n"},{"title":"如何收集前端性能数据","date":"2021-06-07T13:52:34.000Z","_content":"\n\n## 什么是性能监控？\n\n\n\n","source":"_posts/如何收集前端性能数据.md","raw":"---\ntitle: 如何收集前端性能数据\ndate: 2021-06-07 21:52:34\ntags:\n---\n\n\n## 什么是性能监控？\n\n\n\n","slug":"如何收集前端性能数据","published":1,"updated":"2021-11-14T17:03:12.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvzhr24r0004lmbmeghfb1ck","content":"<h2 id=\"什么是性能监控？\"><a href=\"#什么是性能监控？\" class=\"headerlink\" title=\"什么是性能监控？\"></a>什么是性能监控？</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是性能监控？\"><a href=\"#什么是性能监控？\" class=\"headerlink\" title=\"什么是性能监控？\"></a>什么是性能监控？</h2>"},{"title":"实现一个深拷贝","date":"2020-05-26T10:25:59.000Z","_content":"\n# 一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\n\n## 可以通过JSO.stringify和JSON.parse方法\n\n这是JS实现深拷贝最简单的方法了，原理就是先将对象转换为字符串，再通过JSON.parse重新建立一个对象。 但是这种方法会存在属性丢失的问题\n\n- **undefined、symbol 和函数这三种情况，会直接忽略，正则会被转换为空对象**\n  \n  ```tyoescript\n    let obj = {\n      a: '哈哈哈',\n      b: function(){},\n      c: () => {},\n      d: Symbol('foo'),\n      e: new RegExp('ab+c'),\n      f: undefind\n    }\n\n    const newObj = JSON.parse(JSON.stringify(obj))\n\n    console.log(newObj)\n  ```\n\n  运行结果:\n\n  ![运行结果](https://fdfs.xmcdn.com/group79/M07/74/E6/wKgPC17M9dbCDB3EAABNoIa052U513.png)\n\n  可以看到，函数、正则、Symbol，undefind都没有被正确的复制。\n\n- **循环引用情况下，会报错**\n\n  再看如下代码，如果在JSON.stringify中传入一个循环引用的对象，那么会直接报错：\n\n  ```\n  let objA = {\n    name: 'this is a',\n  }\n\n  let objB = {\n    name: 'this is b'\n  }\n\n  objA.child = objB\n  objB.parent = objA\n\n  console.log(JSON.parse(JSON.stringify(objA)))\n  ```\n\n  ![运行结果](https://fdfs.xmcdn.com/group80/M04/6C/FF/wKgPDF7NA7vQXSqPAAEsBhCgVfg210.jpg)\n\n- **相同的引用会被重复复制**\n\n  看如下代码\n  ```\n    let obj = { name: 'TSD' }\n\n    let objA = { age: 18 }\n\n    obj.age = objA\n    obj.age2 = objA\n\n    const newObj = JSON.parse(JSON.stringify(obj))\n\n    obj.age.age = 22\n    newObj.age.age = 30\n\n    console.log('原对象', obj)\n\n    console.log('新对象', newObj.age, newObj.age2)\n  ```\n\n  结果如下:\n\n  ![运行结果](https://fdfs.xmcdn.com/group80/M02/6D/A2/wKgPDF7NBt6AIn1LAAB1dLRGuhg559.jpg)\n\n  我们看到原对象改变age后，age2也得到了改变。但是复制对象没有保持和源对象一样的结构，所以JSON实现深拷贝不能处理指向相同引用的情况，相同的引用会被重复复制。\n\n\n- **new Date 情况下，转换结果不正确**\n\n  ```\n    const date = new Date() \n    // Tue May 26 2020 20:44:32 GMT+0800 (中国标准时间)\n\n    JSON.stringify(date) \n    // \"\"2020-05-26T12:44:32.869Z\"\"\n\n    JSON.parse(JSON.stringify(date)) \n    // \"2020-05-26T12:44:32.869Z\"\n    \n  ```\n\n  解决方法是直接转换成时间戳\n\n  ```\n    const date = new Date().valueOf() // 1590497484613\n\n    JSON.stringify(date) // \"1590497484613\"\n\n    JSON.parse(JSON.stringify(date)) // 1590497484613\n  ```\n\n# 二.使用原生JS去实现一个深拷贝\n\n##  深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\n\n  **第一步 先实现浅拷贝**\n\n  ```  \n  const cloneDeep = (o) => {\n\n    let target = {}\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        console.log(key)\n        target[key] = o[key]\n      }\n    }\n\n    return target\n  }\n  ```\n\n  **第二步 加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝**\n\n  ```\n  const cloneDeep = (o) => {\n\n    let target = {}\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key])\n        } else {\n          target[key] = o[key]\n        }\n      }\n    }\n\n    return target\n  }\n\n  // 判断是否是对象\n  const isObject = (obj) => {\n    return typeof obj === 'object'\n  }\n  ```\n  到这里，一个简单的深拷贝已经完成了，但是依然存在很多问题\n\n  - 没有对传入参数进行校验，传入 null 时应该返回 null 而不是 {}\n  - 对于对象的判断逻辑不严谨，因为 typeof null === 'object'\n  - 没有考虑数组的兼容\n  \n  \n**第三步 拷贝数组**\n  \n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n      if (!isObject(o)) return o\n\n      const target = Array.isArray(o) ? [] : {} // 新增代码\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key])\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n\n  ```\n\n  **第四步 循环应用处理**\n\n  其实解决办法很简单，我们设置一个数组或者哈希表存储已经拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出值返回即可，顺便还解决了引用丢失的问题\n\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n\n      if (!isObject(o)) return o\n      if (hash.has(o)) return hash.get(o) // 新增代码\n\n      const target = Array.isArray(o) ? [] : {}\n\n\n      hash.set(o, target) // 新增代码\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key], hash) // 新增代码\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  使用数组\n  ```\n    const cloneDeep = (o, uniqueList = []) => {\n      if (!isObject(o)) return o\n\n      const target = Array.isArray(o) ? [] : {}\n\n      const uniqueData = find(uniqueList, o)\n      if (uniqueData) {\n        return uniqueData.target\n      }\n      uniqueList.push({\n        source: o,\n        target\n      })\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key],uniqueList)  // 新增代码\n            console.log(target)\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    const find = (arr, source) => {\n      for (const item of arr) {\n        if (item.source === source) return item\n      }\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  **第五步 拷贝Symbol**\n\n  我们可以Symbol类型吗？当然可以。Symbol是ES6才有的类型，我们需要一些方法来检测Symbol类型\n\n  - 方法一：Object.getOwnPropertySymbols(...)\n  - 方法二：Reflect.ownKeys(...)\n\n\n  方法一思路是，先查找一下有没有Symbol属性，如果查找到则先遍历处理 Symbol 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。\n\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n\n    if (!isObject(o)) return o\n    if (hash.has(o)) return hash.get(o)\n\n    const target = Array.isArray(o) ? [] : {}\n\n    hash.set(o, target)\n\n    // 新增代码\n    let symbolKeys = Object.getOwnPropertySymbols(o)\n    if (symbolKeys.length >= 0) {\n      symbolKeys.forEach((symbolKey, index) => {\n        if (isObject(o[symbolKey])) {\n          target[symbolKey] = cloneDeep(o[symbolKey], hash)\n        } else {\n          target[symbolKey] = o[symbolKey]\n        }\n      })\n    }\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key], hash)\n        } else {\n          target[key] = o[key]\n        }\n      }\n    }\n\n    return target\n  }\n\n  // 判断是否是对象\n  const isObject = (obj) => {\n    return typeof obj === 'object' && obj !== null\n  }\n  ```\n\n  方法二: 这里使用了 Reflect.ownKeys() 获取所有的键值，同时包括 Symbol，对 source 遍历赋值即可。\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n      if (!isObject(o)) return o\n      if (hash.has(o)) return hash.get(o)\n\n      const target = Array.isArray(o) ? [] : {}\n\n      hash.set(o, target)\n\n      Reflect.ownKeys(o).forEach((key) => {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key])\n        } else {\n          target[key] = o[key]\n        }\n      })\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  Reflect.ownKeys() 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象自身的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 for..in 就可以了。\n\n  **第五步 破解递归爆栈**\n\n  上面使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。\n\n  ```\n    // RangeError: Maximum call stack size exceeded\n  ```\n\n  其实使用循环就可以了，有的面试官可能会问，实现一个不用递归版本的深克隆\n\n  ```\n      const cloneDeep = (o) => {\n      const root = {}\n\n      // 栈\n      const loopList = [{\n        parent: root,\n        key: undefined,\n        data: o\n      }]\n\n      while (loopList.length) {\n        const node = loopList.pop()\n        const { parent, key, data } = node\n\n        let res = parent\n        if (typeof key !== 'undefined') {\n          parent[key] = {}\n          res = parent[key]\n        }\n\n        for (const k in data) {\n          if (data.hasOwnProperty(k)) {\n            if (isObject(data[k])) {\n              loopList.push({\n                parent: res,\n                key: k,\n                data: data[k]\n              })\n            } else {\n              res[k] = data[k]\n            }\n          }\n        }\n      }\n\n      return root\n\n    }\n  ```\n\n\n\n\n\n\n\n","source":"_posts/实现一个深拷贝.md","raw":"---\ntitle: 实现一个深拷贝\ndate: 2020-05-26 18:25:59\ntags: 算法 深拷贝 JS JS基础 面试题 进阶\n---\n\n# 一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\n\n## 可以通过JSO.stringify和JSON.parse方法\n\n这是JS实现深拷贝最简单的方法了，原理就是先将对象转换为字符串，再通过JSON.parse重新建立一个对象。 但是这种方法会存在属性丢失的问题\n\n- **undefined、symbol 和函数这三种情况，会直接忽略，正则会被转换为空对象**\n  \n  ```tyoescript\n    let obj = {\n      a: '哈哈哈',\n      b: function(){},\n      c: () => {},\n      d: Symbol('foo'),\n      e: new RegExp('ab+c'),\n      f: undefind\n    }\n\n    const newObj = JSON.parse(JSON.stringify(obj))\n\n    console.log(newObj)\n  ```\n\n  运行结果:\n\n  ![运行结果](https://fdfs.xmcdn.com/group79/M07/74/E6/wKgPC17M9dbCDB3EAABNoIa052U513.png)\n\n  可以看到，函数、正则、Symbol，undefind都没有被正确的复制。\n\n- **循环引用情况下，会报错**\n\n  再看如下代码，如果在JSON.stringify中传入一个循环引用的对象，那么会直接报错：\n\n  ```\n  let objA = {\n    name: 'this is a',\n  }\n\n  let objB = {\n    name: 'this is b'\n  }\n\n  objA.child = objB\n  objB.parent = objA\n\n  console.log(JSON.parse(JSON.stringify(objA)))\n  ```\n\n  ![运行结果](https://fdfs.xmcdn.com/group80/M04/6C/FF/wKgPDF7NA7vQXSqPAAEsBhCgVfg210.jpg)\n\n- **相同的引用会被重复复制**\n\n  看如下代码\n  ```\n    let obj = { name: 'TSD' }\n\n    let objA = { age: 18 }\n\n    obj.age = objA\n    obj.age2 = objA\n\n    const newObj = JSON.parse(JSON.stringify(obj))\n\n    obj.age.age = 22\n    newObj.age.age = 30\n\n    console.log('原对象', obj)\n\n    console.log('新对象', newObj.age, newObj.age2)\n  ```\n\n  结果如下:\n\n  ![运行结果](https://fdfs.xmcdn.com/group80/M02/6D/A2/wKgPDF7NBt6AIn1LAAB1dLRGuhg559.jpg)\n\n  我们看到原对象改变age后，age2也得到了改变。但是复制对象没有保持和源对象一样的结构，所以JSON实现深拷贝不能处理指向相同引用的情况，相同的引用会被重复复制。\n\n\n- **new Date 情况下，转换结果不正确**\n\n  ```\n    const date = new Date() \n    // Tue May 26 2020 20:44:32 GMT+0800 (中国标准时间)\n\n    JSON.stringify(date) \n    // \"\"2020-05-26T12:44:32.869Z\"\"\n\n    JSON.parse(JSON.stringify(date)) \n    // \"2020-05-26T12:44:32.869Z\"\n    \n  ```\n\n  解决方法是直接转换成时间戳\n\n  ```\n    const date = new Date().valueOf() // 1590497484613\n\n    JSON.stringify(date) // \"1590497484613\"\n\n    JSON.parse(JSON.stringify(date)) // 1590497484613\n  ```\n\n# 二.使用原生JS去实现一个深拷贝\n\n##  深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\n\n  **第一步 先实现浅拷贝**\n\n  ```  \n  const cloneDeep = (o) => {\n\n    let target = {}\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        console.log(key)\n        target[key] = o[key]\n      }\n    }\n\n    return target\n  }\n  ```\n\n  **第二步 加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝**\n\n  ```\n  const cloneDeep = (o) => {\n\n    let target = {}\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key])\n        } else {\n          target[key] = o[key]\n        }\n      }\n    }\n\n    return target\n  }\n\n  // 判断是否是对象\n  const isObject = (obj) => {\n    return typeof obj === 'object'\n  }\n  ```\n  到这里，一个简单的深拷贝已经完成了，但是依然存在很多问题\n\n  - 没有对传入参数进行校验，传入 null 时应该返回 null 而不是 {}\n  - 对于对象的判断逻辑不严谨，因为 typeof null === 'object'\n  - 没有考虑数组的兼容\n  \n  \n**第三步 拷贝数组**\n  \n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n      if (!isObject(o)) return o\n\n      const target = Array.isArray(o) ? [] : {} // 新增代码\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key])\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n\n  ```\n\n  **第四步 循环应用处理**\n\n  其实解决办法很简单，我们设置一个数组或者哈希表存储已经拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出值返回即可，顺便还解决了引用丢失的问题\n\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n\n      if (!isObject(o)) return o\n      if (hash.has(o)) return hash.get(o) // 新增代码\n\n      const target = Array.isArray(o) ? [] : {}\n\n\n      hash.set(o, target) // 新增代码\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key], hash) // 新增代码\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  使用数组\n  ```\n    const cloneDeep = (o, uniqueList = []) => {\n      if (!isObject(o)) return o\n\n      const target = Array.isArray(o) ? [] : {}\n\n      const uniqueData = find(uniqueList, o)\n      if (uniqueData) {\n        return uniqueData.target\n      }\n      uniqueList.push({\n        source: o,\n        target\n      })\n\n      for (const key in o) {\n        if (Object.prototype.hasOwnProperty.call(o, key)) {\n          if (isObject(o[key])) {\n            target[key] = cloneDeep(o[key],uniqueList)  // 新增代码\n            console.log(target)\n          } else {\n            target[key] = o[key]\n          }\n        }\n      }\n\n      return target\n    }\n\n    const find = (arr, source) => {\n      for (const item of arr) {\n        if (item.source === source) return item\n      }\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  **第五步 拷贝Symbol**\n\n  我们可以Symbol类型吗？当然可以。Symbol是ES6才有的类型，我们需要一些方法来检测Symbol类型\n\n  - 方法一：Object.getOwnPropertySymbols(...)\n  - 方法二：Reflect.ownKeys(...)\n\n\n  方法一思路是，先查找一下有没有Symbol属性，如果查找到则先遍历处理 Symbol 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。\n\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n\n    if (!isObject(o)) return o\n    if (hash.has(o)) return hash.get(o)\n\n    const target = Array.isArray(o) ? [] : {}\n\n    hash.set(o, target)\n\n    // 新增代码\n    let symbolKeys = Object.getOwnPropertySymbols(o)\n    if (symbolKeys.length >= 0) {\n      symbolKeys.forEach((symbolKey, index) => {\n        if (isObject(o[symbolKey])) {\n          target[symbolKey] = cloneDeep(o[symbolKey], hash)\n        } else {\n          target[symbolKey] = o[symbolKey]\n        }\n      })\n    }\n\n    for (const key in o) {\n      if (Object.prototype.hasOwnProperty.call(o, key)) {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key], hash)\n        } else {\n          target[key] = o[key]\n        }\n      }\n    }\n\n    return target\n  }\n\n  // 判断是否是对象\n  const isObject = (obj) => {\n    return typeof obj === 'object' && obj !== null\n  }\n  ```\n\n  方法二: 这里使用了 Reflect.ownKeys() 获取所有的键值，同时包括 Symbol，对 source 遍历赋值即可。\n  ```\n    const cloneDeep = (o, hash = new WeakMap()) => {\n      if (!isObject(o)) return o\n      if (hash.has(o)) return hash.get(o)\n\n      const target = Array.isArray(o) ? [] : {}\n\n      hash.set(o, target)\n\n      Reflect.ownKeys(o).forEach((key) => {\n        if (isObject(o[key])) {\n          target[key] = cloneDeep(o[key])\n        } else {\n          target[key] = o[key]\n        }\n      })\n\n      return target\n    }\n\n    // 判断是否是对象\n    const isObject = (obj) => {\n      return typeof obj === 'object' && obj !== null\n    }\n  ```\n\n  Reflect.ownKeys() 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象自身的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 for..in 就可以了。\n\n  **第五步 破解递归爆栈**\n\n  上面使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。\n\n  ```\n    // RangeError: Maximum call stack size exceeded\n  ```\n\n  其实使用循环就可以了，有的面试官可能会问，实现一个不用递归版本的深克隆\n\n  ```\n      const cloneDeep = (o) => {\n      const root = {}\n\n      // 栈\n      const loopList = [{\n        parent: root,\n        key: undefined,\n        data: o\n      }]\n\n      while (loopList.length) {\n        const node = loopList.pop()\n        const { parent, key, data } = node\n\n        let res = parent\n        if (typeof key !== 'undefined') {\n          parent[key] = {}\n          res = parent[key]\n        }\n\n        for (const k in data) {\n          if (data.hasOwnProperty(k)) {\n            if (isObject(data[k])) {\n              loopList.push({\n                parent: res,\n                key: k,\n                data: data[k]\n              })\n            } else {\n              res[k] = data[k]\n            }\n          }\n        }\n      }\n\n      return root\n\n    }\n  ```\n\n\n\n\n\n\n\n","slug":"实现一个深拷贝","published":1,"updated":"2021-11-14T17:03:13.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvzhr24s0005lmbm5c1o2io5","content":"<h1 id=\"一-JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\"><a href=\"#一-JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\" class=\"headerlink\" title=\"一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\"></a>一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？</h1><h2 id=\"可以通过JSO-stringify和JSON-parse方法\"><a href=\"#可以通过JSO-stringify和JSON-parse方法\" class=\"headerlink\" title=\"可以通过JSO.stringify和JSON.parse方法\"></a>可以通过JSO.stringify和JSON.parse方法</h2><p>这是JS实现深拷贝最简单的方法了，原理就是先将对象转换为字符串，再通过JSON.parse重新建立一个对象。 但是这种方法会存在属性丢失的问题</p>\n<ul>\n<li><p><strong>undefined、symbol 和函数这三种情况，会直接忽略，正则会被转换为空对象</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  a: &#x27;哈哈哈&#x27;,</span><br><span class=\"line\">  b: function()&#123;&#125;,</span><br><span class=\"line\">  c: () =&gt; &#123;&#125;,</span><br><span class=\"line\">  d: Symbol(&#x27;foo&#x27;),</span><br><span class=\"line\">  e: new RegExp(&#x27;ab+c&#x27;),</span><br><span class=\"line\">  f: undefind</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const newObj = JSON.parse(JSON.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(newObj)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<p><img src=\"https://fdfs.xmcdn.com/group79/M07/74/E6/wKgPC17M9dbCDB3EAABNoIa052U513.png\" alt=\"运行结果\"></p>\n<p>可以看到，函数、正则、Symbol，undefind都没有被正确的复制。</p>\n</li>\n<li><p><strong>循环引用情况下，会报错</strong></p>\n<p>再看如下代码，如果在JSON.stringify中传入一个循环引用的对象，那么会直接报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let objA = &#123;</span><br><span class=\"line\">  name: &#x27;this is a&#x27;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let objB = &#123;</span><br><span class=\"line\">  name: &#x27;this is b&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">objA.child = objB</span><br><span class=\"line\">objB.parent = objA</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(JSON.parse(JSON.stringify(objA)))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://fdfs.xmcdn.com/group80/M04/6C/FF/wKgPDF7NA7vQXSqPAAEsBhCgVfg210.jpg\" alt=\"运行结果\"></p>\n</li>\n<li><p><strong>相同的引用会被重复复制</strong></p>\n<p>看如下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123; name: &#x27;TSD&#x27; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let objA = &#123; age: 18 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.age = objA</span><br><span class=\"line\">obj.age2 = objA</span><br><span class=\"line\"></span><br><span class=\"line\">const newObj = JSON.parse(JSON.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">obj.age.age = 22</span><br><span class=\"line\">newObj.age.age = 30</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#x27;原对象&#x27;, obj)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#x27;新对象&#x27;, newObj.age, newObj.age2)</span><br></pre></td></tr></table></figure>\n\n<p>结果如下:</p>\n<p><img src=\"https://fdfs.xmcdn.com/group80/M02/6D/A2/wKgPDF7NBt6AIn1LAAB1dLRGuhg559.jpg\" alt=\"运行结果\"></p>\n<p>我们看到原对象改变age后，age2也得到了改变。但是复制对象没有保持和源对象一样的结构，所以JSON实现深拷贝不能处理指向相同引用的情况，相同的引用会被重复复制。</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>new Date 情况下，转换结果不正确</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const date = new Date() </span><br><span class=\"line\">// Tue May 26 2020 20:44:32 GMT+0800 (中国标准时间)</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.stringify(date) </span><br><span class=\"line\">// &quot;&quot;2020-05-26T12:44:32.869Z&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.parse(JSON.stringify(date)) </span><br><span class=\"line\">// &quot;2020-05-26T12:44:32.869Z&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>解决方法是直接转换成时间戳</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const date = new Date().valueOf() // 1590497484613</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.stringify(date) // &quot;1590497484613&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.parse(JSON.stringify(date)) // 1590497484613</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"二-使用原生JS去实现一个深拷贝\"><a href=\"#二-使用原生JS去实现一个深拷贝\" class=\"headerlink\" title=\"二.使用原生JS去实现一个深拷贝\"></a>二.使用原生JS去实现一个深拷贝</h1><h2 id=\"深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\"><a href=\"#深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\" class=\"headerlink\" title=\"深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\"></a>深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归</h2><p>  <strong>第一步 先实现浅拷贝</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  let target = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      console.log(key)</span><br><span class=\"line\">      target[key] = o[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>第二步 加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  let target = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] = cloneDeep(o[key])</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] = o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  到这里，一个简单的深拷贝已经完成了，但是依然存在很多问题</p>\n<ul>\n<li>没有对传入参数进行校验，传入 null 时应该返回 null 而不是 {}</li>\n<li>对于对象的判断逻辑不严谨，因为 typeof null === ‘object’</li>\n<li>没有考虑数组的兼容</li>\n</ul>\n<p><strong>第三步 拷贝数组</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o, hash = new WeakMap()) =&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\"></span><br><span class=\"line\">  const target = Array.isArray(o) ? [] : &#123;&#125; // 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] = cloneDeep(o[key])</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] = o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27; &amp;&amp; obj !== null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>  <strong>第四步 循环应用处理</strong></p>\n<p>  其实解决办法很简单，我们设置一个数组或者哈希表存储已经拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出值返回即可，顺便还解决了引用丢失的问题</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o, hash = new WeakMap()) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o) // 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  const target = Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target) // 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] = cloneDeep(o[key], hash) // 新增代码</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] = o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27; &amp;&amp; obj !== null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  使用数组<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o, uniqueList = []) =&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\"></span><br><span class=\"line\">  const target = Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const uniqueData = find(uniqueList, o)</span><br><span class=\"line\">  if (uniqueData) &#123;</span><br><span class=\"line\">    return uniqueData.target</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  uniqueList.push(&#123;</span><br><span class=\"line\">    source: o,</span><br><span class=\"line\">    target</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] = cloneDeep(o[key],uniqueList)  // 新增代码</span><br><span class=\"line\">        console.log(target)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] = o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const find = (arr, source) =&gt; &#123;</span><br><span class=\"line\">  for (const item of arr) &#123;</span><br><span class=\"line\">    if (item.source === source) return item</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27; &amp;&amp; obj !== null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  <strong>第五步 拷贝Symbol</strong></p>\n<p>  我们可以Symbol类型吗？当然可以。Symbol是ES6才有的类型，我们需要一些方法来检测Symbol类型</p>\n<ul>\n<li>方法一：Object.getOwnPropertySymbols(…)</li>\n<li>方法二：Reflect.ownKeys(…)</li>\n</ul>\n<p>  方法一思路是，先查找一下有没有Symbol属性，如果查找到则先遍历处理 Symbol 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const cloneDeep = (o, hash = new WeakMap()) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o)</span><br><span class=\"line\"></span><br><span class=\"line\">  const target = Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 新增代码</span><br><span class=\"line\">  let symbolKeys = Object.getOwnPropertySymbols(o)</span><br><span class=\"line\">  if (symbolKeys.length &gt;= 0) &#123;</span><br><span class=\"line\">    symbolKeys.forEach((symbolKey, index) =&gt; &#123;</span><br><span class=\"line\">      if (isObject(o[symbolKey])) &#123;</span><br><span class=\"line\">        target[symbolKey] = cloneDeep(o[symbolKey], hash)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[symbolKey] = o[symbolKey]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] = cloneDeep(o[key], hash)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] = o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27; &amp;&amp; obj !== null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  方法二: 这里使用了 Reflect.ownKeys() 获取所有的键值，同时包括 Symbol，对 source 遍历赋值即可。<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o, hash = new WeakMap()) =&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o)</span><br><span class=\"line\"></span><br><span class=\"line\">  const target = Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target)</span><br><span class=\"line\"></span><br><span class=\"line\">  Reflect.ownKeys(o).forEach((key) =&gt; &#123;</span><br><span class=\"line\">    if (isObject(o[key])) &#123;</span><br><span class=\"line\">      target[key] = cloneDeep(o[key])</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      target[key] = o[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27; &amp;&amp; obj !== null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  Reflect.ownKeys() 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象自身的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 for..in 就可以了。</p>\n<p>  <strong>第五步 破解递归爆栈</strong></p>\n<p>  上面使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RangeError: Maximum call stack size exceeded</span><br></pre></td></tr></table></figure>\n\n<p>  其实使用循环就可以了，有的面试官可能会问，实现一个不用递归版本的深克隆</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const cloneDeep = (o) =&gt; &#123;</span><br><span class=\"line\">  const root = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 栈</span><br><span class=\"line\">  const loopList = [&#123;</span><br><span class=\"line\">    parent: root,</span><br><span class=\"line\">    key: undefined,</span><br><span class=\"line\">    data: o</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">  while (loopList.length) &#123;</span><br><span class=\"line\">    const node = loopList.pop()</span><br><span class=\"line\">    const &#123; parent, key, data &#125; = node</span><br><span class=\"line\"></span><br><span class=\"line\">    let res = parent</span><br><span class=\"line\">    if (typeof key !== &#x27;undefined&#x27;) &#123;</span><br><span class=\"line\">      parent[key] = &#123;&#125;</span><br><span class=\"line\">      res = parent[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const k in data) &#123;</span><br><span class=\"line\">      if (data.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">        if (isObject(data[k])) &#123;</span><br><span class=\"line\">          loopList.push(&#123;</span><br><span class=\"line\">            parent: res,</span><br><span class=\"line\">            key: k,</span><br><span class=\"line\">            data: data[k]</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          res[k] = data[k]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return root</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\"><a href=\"#一-JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\" class=\"headerlink\" title=\"一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？\"></a>一.JS如何有什么办法可以实现深拷贝？每个方法会有什么问题？</h1><h2 id=\"可以通过JSO-stringify和JSON-parse方法\"><a href=\"#可以通过JSO-stringify和JSON-parse方法\" class=\"headerlink\" title=\"可以通过JSO.stringify和JSON.parse方法\"></a>可以通过JSO.stringify和JSON.parse方法</h2><p>这是JS实现深拷贝最简单的方法了，原理就是先将对象转换为字符串，再通过JSON.parse重新建立一个对象。 但是这种方法会存在属性丢失的问题</p>\n<ul>\n<li><p><strong>undefined、symbol 和函数这三种情况，会直接忽略，正则会被转换为空对象</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  a: &#x27;哈哈哈&#x27;,</span><br><span class=\"line\">  b: function()&#123;&#125;,</span><br><span class=\"line\">  c: () =&gt; &#123;&#125;,</span><br><span class=\"line\">  d: Symbol(&#x27;foo&#x27;),</span><br><span class=\"line\">  e: new RegExp(&#x27;ab+c&#x27;),</span><br><span class=\"line\">  f: undefind</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const newObj = JSON.parse(JSON.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(newObj)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<p><img src=\"https://fdfs.xmcdn.com/group79/M07/74/E6/wKgPC17M9dbCDB3EAABNoIa052U513.png\" alt=\"运行结果\"></p>\n<p>可以看到，函数、正则、Symbol，undefind都没有被正确的复制。</p>\n</li>\n<li><p><strong>循环引用情况下，会报错</strong></p>\n<p>再看如下代码，如果在JSON.stringify中传入一个循环引用的对象，那么会直接报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let objA = &#123;</span><br><span class=\"line\">  name: &#x27;this is a&#x27;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let objB = &#123;</span><br><span class=\"line\">  name: &#x27;this is b&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">objA.child = objB</span><br><span class=\"line\">objB.parent = objA</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(JSON.parse(JSON.stringify(objA)))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://fdfs.xmcdn.com/group80/M04/6C/FF/wKgPDF7NA7vQXSqPAAEsBhCgVfg210.jpg\" alt=\"运行结果\"></p>\n</li>\n<li><p><strong>相同的引用会被重复复制</strong></p>\n<p>看如下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123; name: &#x27;TSD&#x27; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let objA = &#123; age: 18 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.age = objA</span><br><span class=\"line\">obj.age2 = objA</span><br><span class=\"line\"></span><br><span class=\"line\">const newObj = JSON.parse(JSON.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">obj.age.age = 22</span><br><span class=\"line\">newObj.age.age = 30</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#x27;原对象&#x27;, obj)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#x27;新对象&#x27;, newObj.age, newObj.age2)</span><br></pre></td></tr></table></figure>\n\n<p>结果如下:</p>\n<p><img src=\"https://fdfs.xmcdn.com/group80/M02/6D/A2/wKgPDF7NBt6AIn1LAAB1dLRGuhg559.jpg\" alt=\"运行结果\"></p>\n<p>我们看到原对象改变age后，age2也得到了改变。但是复制对象没有保持和源对象一样的结构，所以JSON实现深拷贝不能处理指向相同引用的情况，相同的引用会被重复复制。</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>new Date 情况下，转换结果不正确</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const date = new Date() </span><br><span class=\"line\">// Tue May 26 2020 20:44:32 GMT+0800 (中国标准时间)</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.stringify(date) </span><br><span class=\"line\">// &quot;&quot;2020-05-26T12:44:32.869Z&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.parse(JSON.stringify(date)) </span><br><span class=\"line\">// &quot;2020-05-26T12:44:32.869Z&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>解决方法是直接转换成时间戳</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const date = new Date().valueOf() // 1590497484613</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.stringify(date) // &quot;1590497484613&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.parse(JSON.stringify(date)) // 1590497484613</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"二-使用原生JS去实现一个深拷贝\"><a href=\"#二-使用原生JS去实现一个深拷贝\" class=\"headerlink\" title=\"二.使用原生JS去实现一个深拷贝\"></a>二.使用原生JS去实现一个深拷贝</h1><h2 id=\"深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\"><a href=\"#深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\" class=\"headerlink\" title=\"深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归\"></a>深拷贝主要可以分为2步，浅拷贝与递归，浅拷贝时判断属性是否是对象，如果是对象，则进行递归</h2><p>  <strong>第一步 先实现浅拷贝</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  let target = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      console.log(key)</span><br><span class=\"line\">      target[key] = o[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>第二步 加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  let target = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] = cloneDeep(o[key])</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] = o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  到这里，一个简单的深拷贝已经完成了，但是依然存在很多问题</p>\n<ul>\n<li>没有对传入参数进行校验，传入 null 时应该返回 null 而不是 {}</li>\n<li>对于对象的判断逻辑不严谨，因为 typeof null === ‘object’</li>\n<li>没有考虑数组的兼容</li>\n</ul>\n<p><strong>第三步 拷贝数组</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o, hash = new WeakMap()) =&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\"></span><br><span class=\"line\">  const target = Array.isArray(o) ? [] : &#123;&#125; // 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] = cloneDeep(o[key])</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] = o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27; &amp;&amp; obj !== null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>  <strong>第四步 循环应用处理</strong></p>\n<p>  其实解决办法很简单，我们设置一个数组或者哈希表存储已经拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出值返回即可，顺便还解决了引用丢失的问题</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o, hash = new WeakMap()) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o) // 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  const target = Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target) // 新增代码</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] = cloneDeep(o[key], hash) // 新增代码</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] = o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27; &amp;&amp; obj !== null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  使用数组<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o, uniqueList = []) =&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\"></span><br><span class=\"line\">  const target = Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const uniqueData = find(uniqueList, o)</span><br><span class=\"line\">  if (uniqueData) &#123;</span><br><span class=\"line\">    return uniqueData.target</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  uniqueList.push(&#123;</span><br><span class=\"line\">    source: o,</span><br><span class=\"line\">    target</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] = cloneDeep(o[key],uniqueList)  // 新增代码</span><br><span class=\"line\">        console.log(target)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] = o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const find = (arr, source) =&gt; &#123;</span><br><span class=\"line\">  for (const item of arr) &#123;</span><br><span class=\"line\">    if (item.source === source) return item</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27; &amp;&amp; obj !== null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  <strong>第五步 拷贝Symbol</strong></p>\n<p>  我们可以Symbol类型吗？当然可以。Symbol是ES6才有的类型，我们需要一些方法来检测Symbol类型</p>\n<ul>\n<li>方法一：Object.getOwnPropertySymbols(…)</li>\n<li>方法二：Reflect.ownKeys(…)</li>\n</ul>\n<p>  方法一思路是，先查找一下有没有Symbol属性，如果查找到则先遍历处理 Symbol 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const cloneDeep = (o, hash = new WeakMap()) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o)</span><br><span class=\"line\"></span><br><span class=\"line\">  const target = Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 新增代码</span><br><span class=\"line\">  let symbolKeys = Object.getOwnPropertySymbols(o)</span><br><span class=\"line\">  if (symbolKeys.length &gt;= 0) &#123;</span><br><span class=\"line\">    symbolKeys.forEach((symbolKey, index) =&gt; &#123;</span><br><span class=\"line\">      if (isObject(o[symbolKey])) &#123;</span><br><span class=\"line\">        target[symbolKey] = cloneDeep(o[symbolKey], hash)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[symbolKey] = o[symbolKey]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in o) &#123;</span><br><span class=\"line\">    if (Object.prototype.hasOwnProperty.call(o, key)) &#123;</span><br><span class=\"line\">      if (isObject(o[key])) &#123;</span><br><span class=\"line\">        target[key] = cloneDeep(o[key], hash)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        target[key] = o[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27; &amp;&amp; obj !== null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  方法二: 这里使用了 Reflect.ownKeys() 获取所有的键值，同时包括 Symbol，对 source 遍历赋值即可。<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cloneDeep = (o, hash = new WeakMap()) =&gt; &#123;</span><br><span class=\"line\">  if (!isObject(o)) return o</span><br><span class=\"line\">  if (hash.has(o)) return hash.get(o)</span><br><span class=\"line\"></span><br><span class=\"line\">  const target = Array.isArray(o) ? [] : &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(o, target)</span><br><span class=\"line\"></span><br><span class=\"line\">  Reflect.ownKeys(o).forEach((key) =&gt; &#123;</span><br><span class=\"line\">    if (isObject(o[key])) &#123;</span><br><span class=\"line\">      target[key] = cloneDeep(o[key])</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      target[key] = o[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  return target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断是否是对象</span><br><span class=\"line\">const isObject = (obj) =&gt; &#123;</span><br><span class=\"line\">  return typeof obj === &#x27;object&#x27; &amp;&amp; obj !== null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  Reflect.ownKeys() 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象自身的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 for..in 就可以了。</p>\n<p>  <strong>第五步 破解递归爆栈</strong></p>\n<p>  上面使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RangeError: Maximum call stack size exceeded</span><br></pre></td></tr></table></figure>\n\n<p>  其实使用循环就可以了，有的面试官可能会问，实现一个不用递归版本的深克隆</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const cloneDeep = (o) =&gt; &#123;</span><br><span class=\"line\">  const root = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 栈</span><br><span class=\"line\">  const loopList = [&#123;</span><br><span class=\"line\">    parent: root,</span><br><span class=\"line\">    key: undefined,</span><br><span class=\"line\">    data: o</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">  while (loopList.length) &#123;</span><br><span class=\"line\">    const node = loopList.pop()</span><br><span class=\"line\">    const &#123; parent, key, data &#125; = node</span><br><span class=\"line\"></span><br><span class=\"line\">    let res = parent</span><br><span class=\"line\">    if (typeof key !== &#x27;undefined&#x27;) &#123;</span><br><span class=\"line\">      parent[key] = &#123;&#125;</span><br><span class=\"line\">      res = parent[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const k in data) &#123;</span><br><span class=\"line\">      if (data.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">        if (isObject(data[k])) &#123;</span><br><span class=\"line\">          loopList.push(&#123;</span><br><span class=\"line\">            parent: res,</span><br><span class=\"line\">            key: k,</span><br><span class=\"line\">            data: data[k]</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          res[k] = data[k]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return root</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"},{"title":"JS基础面试题-持续更新","date":"2021-11-15T06:31:41.000Z","_content":"\n### Q：给元素绑定事件有哪些方式\n","source":"_posts/JS基础面试题-持续更新.md","raw":"---\ntitle: JS基础面试题-持续更新\ndate: 2021-11-15 14:31:41\ncategories: \n\t- 面试题\ntags:\n\t- Web前端\n\t- JS\n\t- 面试题\n\t- 基础\n---\n\n### Q：给元素绑定事件有哪些方式\n","slug":"JS基础面试题-持续更新","published":1,"updated":"2021-11-15T06:34:45.385Z","_id":"ckw0ak6kf00001x9k5u83ad8u","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Q：给元素绑定事件有哪些方式\"><a href=\"#Q：给元素绑定事件有哪些方式\" class=\"headerlink\" title=\"Q：给元素绑定事件有哪些方式\"></a>Q：给元素绑定事件有哪些方式</h3>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<h3 id=\"Q：给元素绑定事件有哪些方式\"><a href=\"#Q：给元素绑定事件有哪些方式\" class=\"headerlink\" title=\"Q：给元素绑定事件有哪些方式\"></a>Q：给元素绑定事件有哪些方式</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckw0ak6kf00001x9k5u83ad8u","category_id":"ckw0afuee0001zk9k238a8ar3","_id":"ckw0ak6kl00021x9k1xk4h279"}],"PostTag":[{"post_id":"ckvzhr24p0001lmbmbxnmf14x","tag_id":"ckvzhr24r0003lmbmbku48xnf","_id":"ckvzhr24s0007lmbm521dfaze"},{"post_id":"ckvzhr24q0002lmbmcholatw2","tag_id":"ckvzhr24s0006lmbm5bmjh7oo","_id":"ckvzhr24t0009lmbm2h3lc1f5"},{"post_id":"ckvzhr24s0005lmbm5c1o2io5","tag_id":"ckvzhr24s0008lmbm3krxc8u6","_id":"ckvzhr24t000almbmg0qc0di3"},{"post_id":"ckw0ak6kf00001x9k5u83ad8u","tag_id":"ckw0afueg0003zk9k8xsba2jn","_id":"ckw0ak6km00031x9k2rpibfii"},{"post_id":"ckw0ak6kf00001x9k5u83ad8u","tag_id":"ckw0afuef0002zk9k4a5cbok2","_id":"ckw0ak6km00041x9khcoy9yi8"},{"post_id":"ckw0ak6kf00001x9k5u83ad8u","tag_id":"ckw0ak6kj00011x9kar3dehsc","_id":"ckw0ak6km00051x9kf591aw5i"},{"post_id":"ckw0ak6kf00001x9k5u83ad8u","tag_id":"ckw0afueg0005zk9k13wx8gin","_id":"ckw0ak6km00061x9k4y8r16ui"}],"Tag":[{"name":"JS JS基础 面试题 进阶","_id":"ckvzhr24r0003lmbmbku48xnf"},{"name":"JS 前端 面试 基础","_id":"ckvzhr24s0006lmbm5bmjh7oo"},{"name":"算法 深拷贝 JS JS基础 面试题 进阶","_id":"ckvzhr24s0008lmbm3krxc8u6"},{"name":"JS","_id":"ckw0afuef0002zk9k4a5cbok2"},{"name":"Web前端","_id":"ckw0afueg0003zk9k8xsba2jn"},{"name":"基础","_id":"ckw0afueg0005zk9k13wx8gin"},{"name":"面试","_id":"ckw0afueh0006zk9k7zq4g46l"},{"name":"面试题","_id":"ckw0ak6kj00011x9kar3dehsc"}]}}